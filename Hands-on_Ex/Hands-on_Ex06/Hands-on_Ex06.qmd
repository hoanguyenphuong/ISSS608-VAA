---
title: "Hands-on_Ex06 - Visualising and Analysing Time-oriented Data"
author: "Hoa Nguyen Phuong"
format: html
date-modified: "last-modified" 
execute:
  echo: true 
  eval: true 
  warning: false 
  freeze: true
---

# [1]{style="color:mediumvioletred"} Learning Objectives

In this chapter, we will learn to plot the following visualisations:

-   a calender heatmap (ggplot2 functions)
-   a cycle plot (ggplot2 functions)
-   a slopegraph
-   a horizon chart

# [2]{style="color:mediumvioletred"} Getting Started

To install and launch the following R packages:

**scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.**

```{r}
pacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, 
               data.table, tidyverse, CGPfunctions, ggHoriPlot)
```

# [3]{style="color:mediumvioletred"} Plotting Calendar Heatmap

Within this section, we will do the following:

-   plot a calendar heatmap by using ggplot2 functions and extension
-   write function using R programming
-   derive specific date and time related field by using base **R** and **libridate** packages
-   perform data preparation task by using tidyr and dplyr packages

## [3.1]{style="color:mediumvioletred"} Data

*eventlog.csv* file will be used for this exercise. This data file consists of 199,999 rows of time-series cyber attack records by country.

::::::::: panel-tabset
## **1-Import data**

To import *eventlog.csv* into R environment and call this data frame as ***attacks.***

```{r}
attacks <- read_csv("data/eventlog.csv")
```

## **2-Exam data structure**

We will use `kable()` to review the structure of the imported data frame.

```{r}
kable(head(attacks))
```

We see 3 columns: *timestamp, source_country,* and *tz.*

-   *timestamp:* stores data-time values in POSIXct format.
-   *source_country:* stores the source of attack. It is in ISO3166-1 alpha-2 country code.
-   *tz:* stores timezone of source IP address.

## **3-Data prep**

**Step 1.** Deriving *weekday* and *hour of day* fields

Two new fields need to be derived: ***wkday*** and ***hour*** before we plot the calendar heatmap.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
make_hr_wkday <- function(ts, sc, tz) {
  real_times <- ymd_hms(ts,
                        tz = tz[1],
                        quiet = TRUE)
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
}

```

::::: goals
::: goals-header
Learning from the code
:::

::: goals-container
-   [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [`hour()`](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package.

-   [`weekdays()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.
:::
:::::

**Step 2.** Deriving the attacks tibble data frame

```{r}
#| code-fold: true
#| code-summary: "Show the code"
wkday_levels <- c('Saturday', 'Friday', 'Thursday',
                  'Wednesday', 'Tuesday', 'Monday',
                  'Sunday')
attacks <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp,
                   .$source_country,
                   .$tz)) %>%
  ungroup() %>%
  mutate(wkday = factor(
    wkday, levels = wkday_levels),
    hour = factor(
      hour, levels = 0:23
    )
  )
```

::::: goals
::: goals-header
Learning from the code
:::

::: goals-container
`mutate()` of **dplyr** package is used to convert *wkday* and *hour* fields into **factor** so they will be ordered when plotting.
:::
:::::

**Step 3.** Check the tibble table:

```{r}
kable(head(attacks))
```
:::::::::

## [3.2]{style="color:mediumvioletred"} Build the calendar heatmaps

We can simply group the count by hour and wkday and plot it, since we know that we have values for every combination. Use the code below to build the calendar heatmaps:

```{r}
#| fig-height: 3
#| code-fold: true
#| code-summary: "Show the code"
grouped <- attacks %>%
  count(wkday, hour) %>%
  ungroup() %>%
  na.omit()

ggplot(grouped,
       aes(hour,
           wkday,
           fill = n)) +
  geom_tile(color = "#f1f4f5",
            size = 0.1) +
  theme_tufte(base_family = "Helvetica") +
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                      low = "#faf1f0",
                      high = "dark red") +
  labs(x = NULL,
       y = NULL,
       title = "Attacks by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6))
```

::::: goals
::: goals-header
Learning from the code
:::

::: goals-container
-   a tibble data table called grouped is derived by aggregating the attack by *wkday* and *hour* fields.
-   a new field called *n* is derived by using group_by() and count() functions.
-   `na.omit()` is used to exclude missing value.
-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border color and line size of the tiles.
-   [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [**ggthemes**](https://jrnold.github.io/ggthemes/reference/index.html) package is used to remove unnecessary chart junk. *\[there is a dashed line around the plot removed by this theme\]*
-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.
-   `scale_fill_gradient()` function is used to create a **two colour gradient** (low-high).
:::
:::::

## [3.3]{style="color:mediumvioletred"} Build multiple calendar heatmaps

**Challenge:** Build multiple heatmaps for the top four countries with the highest number of attacks.

**Step 1.** Derive attack numbers by country object

To identify the top 4 countries with the highest attack numbers, we need to do the following:

-   count the number of attacks by country
-   calculate the percentage of attacks by country
-   save the result in a tibble data frame

```{r}
#| code-fold: true
#| code-summary: "Show the code"
attacks_by_country <- count(
  attacks, source_country) %>%
  mutate(percent = percent(n/sum(n))) %>%
  arrange(desc(n))
```

**Step 2.** Prepare the tidy data frame

Now, we will extract the top 4 countries from ***attacks*** data frame, and save the data in a new tibble data frame *top4_attacks.*

```{r}
#| code-fold: true
#| code-summary: "Show the code"
top4 <- attacks_by_country$source_country[1:4]
top4_attacks <- attacks %>%
  filter(source_country %in% top4) %>%
  count(source_country, wkday, hour) %>%
  ungroup() %>%
  mutate(source_country = factor(
    source_country, levels = top4
  )) %>%
  na.omit()
```

**Step 3.** Plot the multiple calendar heatmap with ggplot2

```{r}
#| fig-height: 3
#| code-fold: true
#| code-summary: "Show the code"
ggplot(top4_attacks,
       aes(hour,
           wkday,
           fill = n)) +
  geom_tile(color = "#f1f4f5", size = 0.1) +
  theme_tufte(base_family = "Helvetica") +
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                      low = "#faf1f0",
                      high = "dark red") +
  facet_wrap(~source_country, ncol = 2) +
  labs(x = NULL, y = NULL,
       title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(size = 4),
        axis.text.y = element_text(size = 4),
        plot.title = element_text(size = 10, hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6))
```

# [4]{style="color:mediumvioletred"} Plotting Cycle Plot

To show time-series patterns and trend of visitor arrivals from Vietnam, we will use Cycle plot to visualise it with **ggplot2**.

## [4.1]{style="color:mediumvioletred"} Data

::: panel-tabset
## **1 Data import**

We will use dataset from *arrivals_by_air.xlsx*. Since it's in .xlsx format, `read_excel()` will be used to the read the file.

```{r}
air <- read_excel("data/arrivals_by_air.xlsx")
```

## **2 Deriving M and Y fields**

Here 2 new fields called *month* and *year* are derived from *Month-Year* field.

```{r}
air$month <- factor(month(air$'Month-Year'),
                    levels = 1:12,
                    labels = month.abb,
                    ordered = TRUE)
air$year <- year(ymd(air$'Month-Year'))
```

## **3 Extract target country**

Now, we will extract data for the target country - Vietnam

```{r}
vietnam <- air %>%
  select(`Vietnam`,
         month,
         year) %>%
  filter(year >= 2010)
```

## **4 Compute year avg arrival by month**

Then we use `group_by()` and `summarise()` of **dplyr** to compute year average arrivals by month.

```{r}
hline.data <- vietnam %>%
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))
```
:::

## [4.2]{style="color:mediumvioletred"} Plotting the cycle plot

Now plot the Cycle plot.

```{r}
#| fig-height: 3
#| code-fold: true
#| code-summary: "Show the code"
ggplot() +
  geom_line(data = vietnam,
            aes(x = year,
                y = `Vietnam`,
                group = month),
            colour = "black") +
  geom_hline(aes(yintercept = avgvalue),
             data = hline.data,
             linetype = 6,
             colour = "red",
             size = 0.5) +
  facet_grid(~month) +
  labs(axis.text.x = element_blank(),
       title = "Visitor arrivals from VN by air, Jan 2010 - Dec 2019") +
  xlab("") +
  ylab("# of Visitors") +
  theme_tufte(base_family = "Helvetica") +
  theme(axis.text.x = element_text(size = 3))
```

# [5]{style="color:mediumvioletred"} Plotting Slopegraph

Ensure **CGPfunctions** has been installed and loaded onto R environment before plot a [slopegraph](https://www.storytellingwithdata.com/blog/2020/7/27/what-is-a-slopegraph). Refer to [Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html) to learn more about the function, and read more about `newggslopegraph()` and its arguments in this [link](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph).

Slopegraphs are not the best choice for categorical data when there’s no real connection between the selected categories.

## [5.1]{style="color:mediumvioletred"} Data import

Let's import the data first:

```{r}
rice <- read_csv("data/rice.csv")
```

Take a look at the data structure:

```{r}
kable(head(rice))
```

## [5.2]{style="color:mediumvioletred"} Plotting the slopegraph

::::::::: panel-tabset
## Rice

Now, we will plot the slopegraph to know the ups and down of the 11 Asian countries.

```{r}
#| fig-height: 10
#| code-fold: true
#| code-summary: "Show the code"
rice %>%
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                  Title = "Rice Yield of Top 11 Asian Countries",
                  SubTitle = "1961-1980",
                  Caption = "Prepared by Cathy C.",
                  DataLabelLineSize = 0.2,
                  DataLabelFillColor = "#EFDCAB") +
  theme_wsj() +
  theme(plot.title = element_text(size = 15),
        plot.subtitle = element_text(size = 11),
        plot.caption = element_text(size = 11),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 8),
        axis.text.y = element_text(size = 8, color = "grey70"))
```

::::: goals
::: goals-header
Learning from the code
:::

::: goals-container
-   The first letter of `Title` `SubTitle` `Caption` need to have upper case letter.
-   For effective data visualisation design, `factor()` is used to convert the value type of *Year* field from numeric to **factor**.
:::
:::::

## Arrivals

```{r}
#| fig-height: 15
#| code-fold: true
#| code-summary: "Show the code"

arrival <- read_xlsx("data/arrivals_by_air.xlsx")
kable(head(arrival))

arrival_trans <- arrival %>%
  mutate(year = year(`Month-Year`)) %>%
  group_by(year) %>%
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

#head(arrival_trans)
arrival_long <- arrival_trans %>%
  mutate(year = as.ordered(year)) %>%
  pivot_longer(
    cols = -year,
    names_to = "Country",
    values_to = "Count"
  ) %>%
  filter(year %in% c(2000, 2005))  %>%
  group_by(Country) %>%
  ungroup()


ggplot_obj <- newggslopegraph(
  dataframe = arrival_long,
  Times = year,
  Measurement = Count,
  Grouping = Country,
  Title = "Arrival Times by Country",
  SubTitle = "2000-2025",
  Caption = "Prepared by Cathy C.",)

ggplot_obj 
```

::::: goals
::: goals-header
Learning from the code
:::

::: goals-container
-   `newggslopegraph()` prefers an ordered sequence for its Times variable to ensure the correct chronological display of data points.
:::
:::::
:::::::::

# Reference

-   Kam, T. S. (2025). R for Visual Analytics. Retrieved February 24, 2025, from \[<https://r4va.netlify.app/chap17>\]

-   Powell, C. (2025). Slopegraph in ggplot2. Retrieved February 24, 2025, from <https://r-charts.com/evolution/newggslopegraph/>
