---
title: "Hands-on Exercise 1"
author: "Hoa Nguyen Phuong"
---

# Getting Started

## Install and launching R packages

The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse)
```

## Importing the data

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

# Plotting a simple bar chart

```{r}
ggplot(data=exam_data,
       aes(x = RACE)) + 
  geom_bar()
```
# 1.1 Introduction
## 1.1.1 Comparison of R Graphics VS ggplot

```{r}
# ggplot(data=df) will just display an empty canvas.
# setting aes(x=MATHS) just sets the x-axis to the range of values in the MATHS column
# using geom_histogram 
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="black", 
                 fill="grey") +
  ggtitle("Distribution of Maths scores")
```
# 1.2 Geometric Objects in ggplot2: geom
## 1.2.1 Bar chart with geom_bar()

```{r}
ggplot(data=exam_data,
       aes(x=RACE)) +
  geom_bar()
``` 

# 1.2.2 Dot plot with geom_dotplot()
Not be confused with scatterplots, a dot plot is essentially a histogram but in the style of stacked dots.
```{r}
ggplot(data=exam_data, 
       aes(x=MATHS)) +
  geom_dotplot(dotsize=0.5)
```
Because the y-axis scale is misleading, we will have to turn off y-axis with the scale_y_continuous()
```{r}
ggplot(data=exam_data,
       aes(x=MATHS)) +
  geom_dotplot(binwidth=2.5,
               dotsize=0.5) +
  scale_y_continuous(NULL, breaks=NULL)
```
Question: When is a dot plot preferred over something like a histogram? Is counting the dots even feasible?

# 1.2.3 Histograms with geom_histogram()
```{r}
# default number of bins is 30
ggplot(data=exam_data,
       aes(x=MATHS)) +
  geom_histogram()
```
In the geom(), we can use the arguments to modify the geometric object.
```{r}
ggplot(data=exam_data,
       aes(x=MATHS)) +
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue")
```
Similar to hue in seaborn, we can colour the histogram by sub-groups using the fill argument in aesthetic(). We can also play around with the other arguments like alpha and color.
```{r}
ggplot(data=exam_data,
       aes(x=MATHS,
           fill=GENDER)) +
  geom_histogram(bins=20,
                 color="grey30")
```

```{r}
# Can't use it on continuous variables either even though there's the warning.
# It's very difficult to see.
ggplot(data=exam_data,
       aes(x=MATHS,
           alpha=CLASS)) +
  geom_histogram(bins=20,
                 color="grey30")
```
```{r}
ggplot(data=exam_data,
       aes(x=MATHS,
           color=GENDER)) +
  geom_histogram(bins=20,
                 alpha=0.3)
```
## 1.2.4 Kernel Density Estimate with geom_density()

```{r}
ggplot(data=exam_data,
       aes(x=MATHS)) +
  geom_density()
```

```{r}
ggplot(data=exam_data,
       aes(x=MATHS,
           color=GENDER)) +
  geom_density()
```

## 1.2.5 Boxplot with geom_boxplot()
```{r}
ggplot(data=exam_data,
       aes(y=MATHS,
           x=GENDER)) +
  geom_boxplot()
```
```{r}
# notches are used to see if medians of the distributions differ
ggplot(data=exam_data,
       aes(y=MATHS,
           x=GENDER)) +
  geom_boxplot(notches=TRUE) # TRUE must be all caps
```

## 1.2.6 Violin plot with geom_violin()
This is for comparing multiple data distributions side by side. With density curves, as the lines may overlap with one another, it is more challenging to compare the different distributions.
```{r}
ggplot(data=exam_data, 
       aes(y=MATHS, 
           x= GENDER)) +
  geom_violin()
```
## 1.2.7 Scatterplot with geom_point()
```{r}
ggplot(data=exam_data,
       aes(x=MATHS,
           y=ENGLISH)) +
  geom_point()
```
## 1.2.8 Combining geom objects
```{r}
ggplot(data=exam_data,
       aes(y=MATHS,
           x=GENDER)) +
  geom_boxplot() +
  geom_point(position="jitter",
             size=0.5)
```
# 1.3 Statistics functions in ggplot2: stat
## 1.3.1 Using the stat_summary() method
The box plot above doesn’t indicate the position of the means. By working with the stat_summary() function, we can indicate the mean values on the plot.
```{r}
ggplot(data=exam_data,
       aes(y=MATHS,
           x=GENDER)) +
  geom_boxplot() +
  stat_summary(geom="point",
                fun="mean",
                colour="red",
                size=4)
```
## 1.3.2 Using geom() to update stat
Overriding the default stat, we can add the mean values as well.
```{r}
ggplot(data=exam_data,
       aes(y=MATHS,
           x=GENDER)) +
  geom_boxplot() +
  geom_point(stat="summary",
             fun="mean",
             colour="red",
             size=4)
```
## 1.3.3 Using geom_smooth() to add best fit curve
```{r}
ggplot(data=exam_data, 
       aes(x=MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(linewidth=0.5)
```
```{r}
ggplot(data=exam_data, 
       aes(x=MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm,
              linewidth=0.5)
```
# 1.4 Facets
Also known as trellis plot. In mpl it’s subplots.
## 1.4.1 Wrapping 1d sequence of panels into 2d with facet_wrap()
```{r}
ggplot(data=exam_data,
       aes(x=MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```
```{r}
# This should be similar to subplots
ggplot(data=exam_data,
       aes(x=MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```
# 1.5 Coordinates
## 1.5.1 Flipping the coordinates with coord_flip()
```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()
```
## 1.5.2 Changing the y- and x-axis range with coord_cartesian()
```{r}
ggplot(data=exam_data, 
       aes(x=MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
```
# 1.6 Themes
List of built-in themes
## 1.6.1 Examples of different themes
```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```
```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```
```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```
# 1.7 Additional Plots
## 1.7.1 Age-sex Pyramid
## 1.7.2 Pareto Chart

