{
  "hash": "38c15413d7f5927a5226a45c795204d8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on_Ex03(2) - Programming Animated Statistical Graphics with R\"\nauthor: \"Hoa Nguyen Phuong\"\nexecute:\n  echo: true \n  eval: true \n  warning: false \n  freeze: true\n---\n\n\n\n# [3-2.1]{style=\"color:mediumvioletred\"} Overview\n\nWhen telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, I will create animated data visualisation with **gganimate** and **plotly r** packages. At the same time, I will learn how to 1/ reshape data by using **tidyr** package, and 2/ process, wrangle and transform datawith **dplyr** package.\n\n## [3-2.1.1]{style=\"color:mediumvioletred\"} Basic concepts of animation\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames - like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregated data.The subset drives the flow of the animation when stitched back together.\n\n![](images/clipboard-224306621.png)\n\n## [3-2.1.2]{style=\"color:mediumvioletred\"} Terminology\nBefore diving into the steps for creating an animated statistical graph, it's important to understand some of the key concepts and terminology related to this type of visualisation.\n\n1.  **Frame:** In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\n2.  **Animation attributes:** The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n::: callout-tip\nBefore starting making animated graphs, think of the question first:\n\n*Does it make sense to go through the effort?*\n\nIf you are conducting an exploratory data analysis, an animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.\n:::\n\n# [3-2.2]{style=\"color:mediumvioletred\"} Getting started\n## [3-2.2.1]{style=\"color:mediumvioletred\"} Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\n-   [**plotly**](https://plotly.com/r/): R library for plotting interactive statistical graphs.\n\n-   [**gganimate**](https://gganimate.com/): a ggplot extension for creating animated statistical graphs.\n\n-   [**gifski**](https://cran.r-project.org/web/packages/gifski/): converts video frames to GIF animations using pngquant's fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\n\n-   [**gapminer**](https://cran.r-project.org/web/packages/gapminder/): an excerpt of the data available at Gapminder.org. We just want to use its *country_colors* scheme.\n\n-   [**tidyverse**](https://www.tidyverse.org/): a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}