[
  {
    "objectID": "In-class_Ex/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03.html",
    "title": "In-class_Ex03",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load the R packages into R environment.\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html#importing-knowledge-graph-data",
    "href": "In-class_Ex/In-class_Ex03.html#importing-knowledge-graph-data",
    "title": "In-class_Ex03",
    "section": "Importing knowledge Graph Data",
    "text": "Importing knowledge Graph Data\n\nkg &lt;- fromJSON(\"MC1_release/MC1_graph.json\")\n\n\nInspect structure\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\nExtract and inspect\n\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html#initial-eda",
    "href": "In-class_Ex/In-class_Ex03.html#initial-eda",
    "title": "In-class_Ex03",
    "section": "Initial EDA",
    "text": "Initial EDA\n\nggplot(data = edges_tbl,\n       aes(y= `Edge Type`)) +\n  geom_bar()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html#creating-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex03.html#creating-knowledge-graph",
    "title": "In-class_Ex03",
    "section": "Creating Knowledge Graph",
    "text": "Creating Knowledge Graph\nThis is\n\nStep 1: Mapping from node id to row index\n\nid_map &lt;- tibble(id= nodes_tbl$id, \n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\nThis ensures correct id from your node list is mapped to the correct row number.\n\n\nStep 2: Map source and target IDs to row indices\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  \n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  \n  rename(to = index)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html#step-3-filter-out-any-unmatched",
    "href": "In-class_Ex/In-class_Ex03.html#step-3-filter-out-any-unmatched",
    "title": "In-class_Ex03",
    "section": "Step 3: Filter out any unmatched",
    "text": "Step 3: Filter out any unmatched\n(invalid) edges\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html#step-4-creating-the-graph",
    "href": "In-class_Ex/In-class_Ex03.html#step-4-creating-the-graph",
    "title": "In-class_Ex03",
    "section": "Step 4: Creating the graph",
    "text": "Step 4: Creating the graph\nLastly, tbl_graph() is used to create tidygraph’s graph pbject by using the code chunk below.\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html#visualizing-the-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex03.html#visualizing-the-knowledge-graph",
    "title": "In-class_Ex03",
    "section": "Visualizing the knowledge graph",
    "text": "Visualizing the knowledge graph\n\nset.seed(1234)\n\n\nVisualising the whole graph\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\nVisualising the sub-graph\nIn this section, we are interested to create a sub-graph based on MemberOf value in Edge_Type column of the edges column of the edge data frame.\n\nStep 1: Filter edges to only “MemberOf”\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\nStep 2: Extract only connected nodes (i.e., used in these edges)\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\nStep 3: Keep only those nodes\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) #optional cleanup\n\n\n\nPlot the sub-graph\n\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html",
    "title": "Take-home_Ex01 (Part 2): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "",
    "text": "In this section, the visualization work submitted by Enrico Sebastian and Andre Ong Jia Kang will be evaluated. For each of the three visualizations, three well-executed design elements will be identified, along with three to four areas identified for improvement. Based on this evaluation, a revised version of each visualization will be developed to address the noted shortcomings while preserving the strengths."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html#introduction",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html#introduction",
    "title": "Take-home_Ex01 (Part 2): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "",
    "text": "In this section, the visualization work submitted by Enrico Sebastian and Andre Ong Jia Kang will be evaluated. For each of the three visualizations, three well-executed design elements will be identified, along with three to four areas identified for improvement. Based on this evaluation, a revised version of each visualization will be developed to address the noted shortcomings while preserving the strengths."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html#preparation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html#preparation",
    "title": "Take-home_Ex01 (Part 2): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "Preparation",
    "text": "Preparation\nTo begin the peer evaluation and makeover process, the necessary packages will be reloaded and the dataset will be re-imported. This ensures the working environment is properly prepared and consistent with the earlier analysis. Once the setup is complete, the three peer-submitted visualizations will be reviewed and enhanced.\n\npacman::p_load(\n  tidyverse, ggplot2, haven, knitr, patchwork, ggthemes, scales, \n  ggridges, ggpubr, gganimate, ggdist, ggtext, ggalt, ggExtra, cowplot, \n  ggnewscale, colorspace, magrittr, RColorBrewer, ggstatsplot, egg, \n  geomtextpath, readxl, performance, parameters, see, ggiraph, \n  treemap, treemapify\n)\n\n\nrespop &lt;- read_csv(\"respopagesex2024/respopagesex2024.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html#visualisation-1-population-by-planning-area-bar-chart-by-enrico-sebastian",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html#visualisation-1-population-by-planning-area-bar-chart-by-enrico-sebastian",
    "title": "Take-home_Ex01 (Part 2): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "Visualisation 1 Population by Planning Area (Bar chart by Enrico Sebastian)",
    "text": "Visualisation 1 Population by Planning Area (Bar chart by Enrico Sebastian)\nThis chart is intended to compare the population distribution across all planning areas in Singapore in 2024. It uses a horizontal bar chart to show which areas are the most and least populated, allowing for a quick visual assessment of population density across the country.\n\n\n✅ Three Strengths\n\nAppropriate Choice of Chart Type\n\nThe use of a bar chart is suitable for this comparison, as it effectively represents population counts by planning area and highlights differences in population magnitude across areas. This makes visual comparisons straightforward and intuitive.\n\nEffective Use of Horizontal Bars\n\nHorizontal orientation improves readability, especially given the long planning area names. It is more suitable than vertical bars for categorical data with long labels.\n\nClear Title and Axis Labels\n\nThe chart includes a descriptive title and well-labeled axes, ensuring that viewers understand what the chart represents and what each axis encodes.\n\n\n⚠️ Three Areas for Improvement\n\nTitle and axis values are too small and not visually emphasized\n\nThe title is small and left-aligned, making it difficult to notice and not visually highlighted. Additionally, the x-axis tick labels (e.g., 100,000; 200,000) are too small, which affects readability.\nTo improve this, increase the font size of both the title and axis ticks, and center-align the title to draw the viewer’s attention and better anchor it to the chart.\n\nUnsorted bars hinder quick comparison\n\nThe bars are not ordered by population count, as the chart uses a random order for planning areas.\nTo improve this, reorder the bars in descending order of population to allow for quicker visual comparison and identification of population extremes.\n\nLack of color variation limits interpretability\n\nThe chart applies the same color to all bars, which flattens the visual presentation and makes it harder to distinguish high-population areas from lower ones. This uniform appearance underplays the variation in population sizes.\nTo improve this, apply a population-based color gradient to the bars. Although displaying the exact values on each bar is typically effective for showing precise comparisons, doing so here —where there are 55 bars — would result in visual clutter and significantly reduce readability. Instead, using a gradient — where darker shades represent populations above 200,000, medium shades for 100,000–200,000, and lighter shades for under 100,000—preserves clarity while still visually conveying the relative magnitude of each planning area.\n\n\n🔁 Makeover Version\nBelow is the revised version of the original chart, applying all suggested improvements:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrespop %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total = sum(Pop)) %&gt;%\n  mutate(Pop_Bin = case_when(\n    Total &gt; 200000 ~ \"&gt; 200,000\",\n    Total &gt; 100000 ~ \"100,000–200,000\",\n    TRUE ~ \"&lt; 100,000\"\n  )) %&gt;%\n  ggplot(aes(x = reorder(PA, Total), y = Total, fill = Pop_Bin)) +\n  geom_col() +\n  coord_flip() +\n  scale_y_continuous(labels = comma) +\n  scale_fill_manual(\n    values = c(\n      \"&lt; 100,000\" = \"#c6dbef\",\n      \"100,000–200,000\" = \"#6baed6\",\n      \"&gt; 200,000\" = \"#084594\"\n    )\n  ) +\n  guides(fill = guide_legend(title = \"Population Range\")) +\n  labs(\n    title = str_wrap(\"Population by Planning Area (Singapore, 2024)\", width = 60),\n    x = \"Planning Area\",\n    y = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 18),\n    axis.text.x = element_text(size = 11, color = \"black\"),\n    axis.text.y = element_text(size = 6, color = \"black\", margin = margin(r = 4), lineheight = 4.0),\n    legend.title = element_text(face = \"bold\"),\n    legend.position = \"right\",\n    plot.background = element_rect(fill = \"#f5f5f5\", colour = \"#f5f5f5\")\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html#visualisation-2-population-by-age-groups-and-gender-pyramid-bar-chart-by-enrico-sebastian",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html#visualisation-2-population-by-age-groups-and-gender-pyramid-bar-chart-by-enrico-sebastian",
    "title": "Take-home_Ex01 (Part 2): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "Visualisation 2 Population by Age Groups and Gender (Pyramid bar chart by Enrico Sebastian)",
    "text": "Visualisation 2 Population by Age Groups and Gender (Pyramid bar chart by Enrico Sebastian)\nThis chart is intended to visualize the distribution of Singapore’s resident population by age group and gender in 2024. It adopts a population pyramid format, with males on one side and females on the other, allowing for direct comparisons of population size across age bands and between genders.\n\n\n✅ Three Strengths\n\nGreat Choice of Chart Type\n\nThe pyramid chart is a strong fit for visualizing a bar chart with two distinct categories — in this case, gender. It enables clear, side-by-side comparison of male and female populations across age groups, making demographic patterns easy to interpret.\n\nIntuitive Color Coding by Gender\n\nUsing distinct, contrasting colors for males and females (e.g., orange and light blue) allows for immediate visual differentiation and eliminates ambiguity in interpretation.\n\nThoughtful Age Binning Enhances Readability\n\nInstead of using every single year of age, the data is grouped into 5-year age bands (e.g., 0–4, 5–9, etc.), which reduces visual clutter while preserving the interpretive value of the age distribution. This allows for easier pattern recognition across life stages.\n\n\n⚠️ Four Areas for Improvement\n\nTitle is too small and not visually emphasized\n\nThe title lacks visual weight and clear association with the chart, making it easy to overlook.\nTo improve this, increase the font size, apply bold formatting, and center-align the title to enhance visibility and balance.\n\nX-axis values should be positive on both sides\n\nCurrently, the x-axis shows negative values on the left for males, which is unintuitive and may visually imply negative population.\nTo improve this, both male and female counts should be shown as positive values while still preserving the mirrored layout. However, as addressed in point 3 below, the makeover version will include value labels on each bar — so displaying detailed axis ticks becomes unnecessary. In such cases, only the central “0” label should be retained for alignment reference, while the other axis values can be hidden. But in scenarios where bar values are not shown, both sides of the axis must display positive tick values for accurate comparison.\n\nVisual comparison between genders is challenging without data labels\n\nWhen the two bars for males and females of an age group are nearly equal in length, it becomes difficult to detect subtle differences and thus, comparison.\nTo improve this, add numeric labels to each bar to provide precise population values and strengthen readability across age groups.\n\nGender colors do not follow common visual conventions\n\nWhile not explicitly stated, a widely followed practice is to use darker shades (e.g., blue) for males and lighter or warmer tones (e.g., pink, red, or orange) for females. The original version reverses this convention — using orange for males and blue for females — which may feel visually off.\nTo improve clarity and maintain intuitive associations, the colors should be reversed to use sky blue for males and salmon or coral for females.\n\n\n🔁 Makeover Version\nBelow is the revised version of the original chart, applying all suggested improvements:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 1. Aggregate by 5-year age bands\npyramid_data &lt;- respop %&gt;%\n  filter(!is.na(Pop)) %&gt;%\n  mutate(Age_Group = case_when(\n    Age %in% as.character(0:4) ~ \"0_to_4\",\n    Age %in% as.character(5:9) ~ \"5_to_9\",\n    Age %in% as.character(10:14) ~ \"10_to_14\",\n    Age %in% as.character(15:19) ~ \"15_to_19\",\n    Age %in% as.character(20:24) ~ \"20_to_24\",\n    Age %in% as.character(25:29) ~ \"25_to_29\",\n    Age %in% as.character(30:34) ~ \"30_to_34\",\n    Age %in% as.character(35:39) ~ \"35_to_39\",\n    Age %in% as.character(40:44) ~ \"40_to_44\",\n    Age %in% as.character(45:49) ~ \"45_to_49\",\n    Age %in% as.character(50:54) ~ \"50_to_54\",\n    Age %in% as.character(55:59) ~ \"55_to_59\",\n    Age %in% as.character(60:64) ~ \"60_to_64\",\n    Age %in% as.character(65:69) ~ \"65_to_69\",\n    Age %in% as.character(70:74) ~ \"70_to_74\",\n    Age %in% as.character(75:79) ~ \"75_to_79\",\n    Age %in% as.character(80:84) ~ \"80_to_84\",\n    Age %in% as.character(85:89) ~ \"85_to_89\",\n    Age == \"90_and_Over\" ~ \"90_and_over\"\n  )) %&gt;%\n  group_by(Age_Group, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\")\n\n# 2. Set proper order of age groups\nage_levels &lt;- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\",\n                \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\",\n                \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\npyramid_data$Age_Group &lt;- factor(pyramid_data$Age_Group, levels = age_levels)\n\n# 3. Mirror male population\npyramid_data &lt;- pyramid_data %&gt;%\n  mutate(Pop_plot = ifelse(Sex == \"Males\", -Pop, Pop))\n\n# 4. Plot\nggplot(pyramid_data, aes(x = Age_Group, y = Pop_plot, fill = Sex)) +\n  geom_col(width = 0.9) +\n\n  # Male labels (left side, hjust = 1.1 to push left)\n  geom_text(\n    data = subset(pyramid_data, Sex == \"Males\"),\n    aes(label = comma(abs(Pop_plot))),\n    hjust = 1.1, size = 2.6, color = \"black\"\n  ) +\n\n  # Female labels (right side, hjust = -0.1 to push right)\n  geom_text(\n    data = subset(pyramid_data, Sex == \"Females\"),\n    aes(label = comma(Pop_plot)),\n    hjust = -0.1, size = 2.6, color = \"black\"\n  ) +\n\n  coord_flip() +\n  scale_y_continuous(\n    breaks = 0,\n    labels = \"0\",\n    expand = expansion(mult = c(0.1, 0.1))\n  ) +\n  scale_fill_manual(values = c(\"Males\" = \"skyblue\", \"Females\" = \"salmon\")) +\n  labs(\n    title = \"Population Pyramid (2024)\",\n    x = \"Age Group\",\n    y = \"Population\",\n    fill = \"Gender\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 18),\n    axis.text.y = element_text(size = 9),\n    axis.text.x = element_text(size = 9),\n    legend.title = element_text(face = \"bold\"),\n    plot.background = element_rect(fill = \"#f5f5f5\", colour = \"#f5f5f5\")\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html#visualisation-3-population-in-tampiness-subzones-bar-chart-and-box-plot-by-andre-ong-jia-kang",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html#visualisation-3-population-in-tampiness-subzones-bar-chart-and-box-plot-by-andre-ong-jia-kang",
    "title": "Take-home_Ex01 (Part 2): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "Visualisation 3 Population in Tampines’s Subzones (Bar chart and Box plot by Andre Ong Jia Kang)",
    "text": "Visualisation 3 Population in Tampines’s Subzones (Bar chart and Box plot by Andre Ong Jia Kang)\nThis visualization is composed of two parts:\n• The upper panel shows a horizontal bar chart comparing the total resident population across the top four subzones within the Tampines planning area: Tampines East, West, North, and Simei.\n• The lower panel uses boxplots to illustrate the distribution of residents’ ages in each subzone, highlighting the median, interquartile range (IQR), and outliers.\nTogether, the panels enable a comparison of both population size and demographic structure across subzones.\n\n\n✅ Three Strengths\n\nMulti-Chart Design Enables Richer Contextual Insight\n\nBy combining a bar chart and a boxplot in a dual-panel layout, the visualization allows readers to absorb related but distinct information — population size and age distribution — within a single frame. This is more informative than relying on a single-chart visualization.\n\nAppropriate Graph Selection for Each Variable Type\n\nThe bar chart provides an intuitive representation of total population counts across subzones, while the boxplots effectively convey the spread, central tendency, and variability of age. In the form of good chart choices, they efficiently deliver both scale and structure of the population.\n\nConsistent Subzone Ordering Enhances Readability\n\nThe subzones appear in the same order — Tampines West, North, East, Simei — across both panels. This consistent alignment makes it easy for viewers to navigate between the bar chart and boxplots without confusion.\n\n\n⚠️ Four Areas for Improvement\n\nTitles of both charts lack emphasis\n\nThe titles are small and left-aligned, making them easy to overlook.\nTo improve this, center-align both titles, apply bold formatting, and increase the font size to enhance visibility and make the purpose of each chart immediately clear.\n\nSubzone order is unintuitive\n\nThe current order of subzones does not follow a logical or alphabetical pattern, which can confuse readers when scanning across both visualizations.\nTo improve this, reorder the subzones as Tampines East → Tampines North → Tampines West → Simei for a more familiar presentation.\n\nVisual redundancy in explanatory note\n\nThe annotation stating “Bars = total pop; Boxes = age spread” at the bottom right is unnecessary, as this distinction is already evident from the respective chart titles.\nTo improve this, remove the note to streamline the visuals and avoid clutter.\n\nInconsistent color usage across charts\n\nThe bar chart uses a single color for all subzones, while the boxplots use four distinct colors — causing a visual disconnect when trying to compare across both.\nTo improve this, assign a distinct color to each subzone and apply it consistently across both charts to support intuitive tracking and comparison.\n\n\n🔁 Makeover Version\nBelow is the revised version of the original chart, applying all suggested improvements:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filter Tampines and get top 4 subzones by total population\ntop4_subzones &lt;- respop %&gt;%\n  filter(PA == \"Tampines\") %&gt;%\n  group_by(SZ) %&gt;%\n  summarise(Total = sum(Pop), .groups = \"drop\") %&gt;%\n  arrange(desc(Total)) %&gt;%\n  slice_head(n = 4)\n\ntop4_names &lt;- c(\"Simei\",\"Tampines West\", \"Tampines North\", \"Tampines East\")\n\n# Prepare bar chart data\nbar_data &lt;- top4_subzones %&gt;%\n  filter(SZ %in% top4_names) %&gt;%\n  mutate(SZ = factor(SZ, levels = top4_names))\n\n# Prepare boxplot data\nbox_data &lt;- respop %&gt;%\n  filter(PA == \"Tampines\", SZ %in% top4_names) %&gt;%\n  mutate(\n    Age = ifelse(Age == \"90_and_over\", 90, as.numeric(Age)),\n    SZ = factor(SZ, levels = top4_names)\n  ) %&gt;%\n  select(SZ, Age, Pop) %&gt;%\n  uncount(weights = Pop)\n\n# Define colors\ncolors &lt;- c(\n  \"Tampines East\" = \"#66c2a5\",\n  \"Tampines North\" = \"#8da0cb\",\n  \"Tampines West\" = \"#fc8d62\",\n  \"Simei\" = \"#e78ac3\"\n)\n\n# Create bar chart\nbar_plot &lt;- ggplot(bar_data, aes(x = SZ, y = Total, fill = SZ)) +\n  geom_col(width = 0.7) +\n  scale_fill_manual(values = colors) +\n  coord_flip() +\n  labs(title = \"Total Population – Top 4 Subzones\", x = NULL, y = \"Population\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n    axis.text.y = element_text(size = 12),\n    axis.text.x = element_text(size = 12),  # enlarged x-axis\n    legend.position = \"none\"\n  ) +\n  scale_y_continuous(labels = comma)\n\n# Create boxplot\nbox_plot &lt;- ggplot(box_data, aes(x = SZ, y = Age, fill = SZ)) +\n  geom_boxplot(width = 0.6, outlier.size = 1) +\n  scale_fill_manual(values = colors) +\n  coord_flip() +\n  labs(title = \"Age Distribution by Subzone\", x = NULL, y = \"Age (years)\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n    axis.text.y = element_text(size = 12),\n    axis.text.x = element_text(size = 12),  # enlarged x-axis\n    legend.position = \"none\"\n  )\n\n# Combine plots\n(bar_plot / box_plot) + plot_layout(heights = c(1, 1))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html#summary",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(2).html#summary",
    "title": "Take-home_Ex01 (Part 2): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "Summary",
    "text": "Summary\nThrough this peer evaluation and makeover exercise, important design lessons were surfaced — from optimizing chart types for clarity to ensuring visual consistency and interpretability. By carefully analyzing the original strengths and addressing identified weaknesses, each revised visualization now communicates insights more effectively while preserving the intent of the original work."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on_Ex06 - Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "In this chapter, we will learn to plot the following visualisations:\n\na calender heatmap (ggplot2 functions)\na cycle plot (ggplot2 functions)\na slopegraph\na horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data",
    "title": "Hands-on_Ex06 - Visualising and Analysing Time-oriented Data",
    "section": "3.1 Data",
    "text": "3.1 Data\neventlog.csv file will be used for this exercise. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n1-Import data2-Exam data structure3-Data prep\n\n\nTo import eventlog.csv into R environment and call this data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\nWe will use kable() to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nWe see 3 columns: timestamp, source_country, and tz.\n\ntimestamp: stores data-time values in POSIXct format.\nsource_country: stores the source of attack. It is in ISO3166-1 alpha-2 country code.\ntz: stores timezone of source IP address.\n\n\n\nStep 1. Deriving weekday and hour of day fields\nTwo new fields need to be derived: wkday and hour before we plot the calendar heatmap.\n\n\nShow the code\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts,\n                        tz = tz[1],\n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n\n\n\nLearning from the code\n\n\n\nymd_hms() and hour() are from lubridate package.\nweekdays() is a base R function.\n\n\n\nStep 2. Deriving the attacks tibble data frame\n\n\nShow the code\nwkday_levels &lt;- c('Saturday', 'Friday', 'Thursday',\n                  'Wednesday', 'Tuesday', 'Monday',\n                  'Sunday')\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp,\n                   .$source_country,\n                   .$tz)) %&gt;%\n  ungroup() %&gt;%\n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour = factor(\n      hour, levels = 0:23\n    )\n  )\n\n\n\n\nLearning from the code\n\n\nmutate() of dplyr package is used to convert wkday and hour fields into factor so they will be ordered when plotting.\n\n\nStep 3. Check the tibble table:\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#build-the-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#build-the-calendar-heatmaps",
    "title": "Hands-on_Ex06 - Visualising and Analysing Time-oriented Data",
    "section": "3.2 Build the calendar heatmaps",
    "text": "3.2 Build the calendar heatmaps\nWe can simply group the count by hour and wkday and plot it, since we know that we have values for every combination. Use the code below to build the calendar heatmaps:\n\n\nShow the code\ngrouped &lt;- attacks %&gt;%\n  count(wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped,\n       aes(hour,\n           wkday,\n           fill = n)) +\n  geom_tile(color = \"#f1f4f5\",\n            size = 0.1) +\n  theme_tufte(base_family = \"Helvetica\") +\n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                      low = \"#faf1f0\",\n                      high = \"dark red\") +\n  labs(x = NULL,\n       y = NULL,\n       title = \"Attacks by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6))\n\n\n\n\n\n\n\n\n\n\n\nLearning from the code\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. [there is a dashed line around the plot removed by this theme]\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to create a two colour gradient (low-high)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#build-multiple-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#build-multiple-calendar-heatmaps",
    "title": "Hands-on_Ex06 - Visualising and Analysing Time-oriented Data",
    "section": "3.3 Build multiple calendar heatmaps",
    "text": "3.3 Build multiple calendar heatmaps\nChallenge: Build multiple heatmaps for the top four countries with the highest number of attacks.\nStep 1. Derive attack numbers by country object\nTo identify the top 4 countries with the highest attack numbers, we need to do the following:\n\ncount the number of attacks by country\ncalculate the percentage of attacks by country\nsave the result in a tibble data frame\n\n\n\nShow the code\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\n\nStep 2. Prepare the tidy data frame\nNow, we will extract the top 4 countries from attacks data frame, and save the data in a new tibble data frame top4_attacks.\n\n\nShow the code\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4\n  )) %&gt;%\n  na.omit()\n\n\nStep 3. Plot the multiple calendar heatmap with ggplot2\n\n\nShow the code\nggplot(top4_attacks,\n       aes(hour,\n           wkday,\n           fill = n)) +\n  geom_tile(color = \"#f1f4f5\", size = 0.1) +\n  theme_tufte(base_family = \"Helvetica\") +\n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                      low = \"#faf1f0\",\n                      high = \"dark red\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL,\n       title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 4),\n        axis.text.y = element_text(size = 4),\n        plot.title = element_text(size = 10, hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-1",
    "title": "Hands-on_Ex06 - Visualising and Analysing Time-oriented Data",
    "section": "4.1 Data",
    "text": "4.1 Data\n\n1 Data import2 Deriving M and Y fields3 Extract target country4 Compute year avg arrival by month\n\n\nWe will use dataset from arrivals_by_air.xlsx. Since it’s in .xlsx format, read_excel() will be used to the read the file.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nHere 2 new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$'Month-Year'),\n                    levels = 1:12,\n                    labels = month.abb,\n                    ordered = TRUE)\nair$year &lt;- year(ymd(air$'Month-Year'))\n\n\n\nNow, we will extract data for the target country - Vietnam\n\nvietnam &lt;- air %&gt;%\n  select(`Vietnam`,\n         month,\n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\nThen we use group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- vietnam %&gt;%\n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-the-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-the-cycle-plot",
    "title": "Hands-on_Ex06 - Visualising and Analysing Time-oriented Data",
    "section": "4.2 Plotting the cycle plot",
    "text": "4.2 Plotting the cycle plot\nNow plot the Cycle plot.\n\n\nShow the code\nggplot() +\n  geom_line(data = vietnam,\n            aes(x = year,\n                y = `Vietnam`,\n                group = month),\n            colour = \"black\") +\n  geom_hline(aes(yintercept = avgvalue),\n             data = hline.data,\n             linetype = 6,\n             colour = \"red\",\n             size = 0.5) +\n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from VN by air, Jan 2010 - Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"# of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\") +\n  theme(axis.text.x = element_text(size = 3))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-import-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-import-1",
    "title": "Hands-on_Ex06 - Visualising and Analysing Time-oriented Data",
    "section": "5.1 Data import",
    "text": "5.1 Data import\nLet’s import the data first:\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\nTake a look at the data structure:\n\nkable(head(rice))\n\n\n\n\nCountry\nYear\nYield\nProduction\n\n\n\n\nChina\n1961\n20787\n56217601\n\n\nChina\n1962\n23700\n65675288\n\n\nChina\n1963\n26833\n76439280\n\n\nChina\n1964\n28289\n85853780\n\n\nChina\n1965\n29667\n90705630\n\n\nChina\n1966\n31445\n98403990"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-the-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-the-slopegraph",
    "title": "Hands-on_Ex06 - Visualising and Analysing Time-oriented Data",
    "section": "5.2 Plotting the slopegraph",
    "text": "5.2 Plotting the slopegraph\n\nRiceArrivals\n\n\nNow, we will plot the slopegraph to know the ups and down of the 11 Asian countries.\n\n\nShow the code\nrice %&gt;%\n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                  Title = \"Rice Yield of Top 11 Asian Countries\",\n                  SubTitle = \"1961-1980\",\n                  Caption = \"Prepared by Cathy C.\",\n                  DataLabelLineSize = 0.2,\n                  DataLabelFillColor = \"#EFDCAB\") +\n  theme_wsj() +\n  theme(plot.title = element_text(size = 15),\n        plot.subtitle = element_text(size = 11),\n        plot.caption = element_text(size = 11),\n        legend.text = element_text(size = 8),\n        legend.title = element_text(size = 8),\n        axis.text.y = element_text(size = 8, color = \"grey70\"))\n\n\n\n\n\n\n\n\n\n\n\nLearning from the code\n\n\n\nThe first letter of Title SubTitle Caption need to have upper case letter.\nFor effective data visualisation design, factor() is used to convert the value type of Year field from numeric to factor.\n\n\n\n\n\n\n\nShow the code\narrival &lt;- read_xlsx(\"data/arrivals_by_air.xlsx\")\nkable(head(arrival))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonth-Year\nRepublic of South Africa\nCanada\nUSA\nBangladesh\nBrunei\nChina\nHong Kong SAR (China)\nIndia\nIndonesia\nJapan\nSouth Korea\nKuwait\nMalaysia\nMyanmar\nPakistan\nPhilippines\nSaudi Arabia\nSri Lanka\nTaiwan\nThailand\nUnited Arab Emirates\nVietnam\nBelgium & Luxembourg\nCIS\nFinland\nFrance\nGermany\nIreland\nItaly\nNetherlands\nSpain\nSwitzerland\nUnited Kingdom\nAustralia\nNew Zealand\n\n\n\n\n2000-01-01\n3291\n5545\n25906\n2883\n3749\n33895\n13692\n19235\n65151\n59288\n21457\n507\n27472\n1177\n2150\n8404\n1312\n3922\n15766\n12048\n1318\n1527\n1434\n2703\n1634\n4752\n12739\n1292\n3544\n4962\n925\n3731\n28986\n34616\n5034\n\n\n2000-02-01\n2357\n6120\n28262\n2469\n3236\n34344\n19870\n18975\n37105\n58188\n19634\n199\n29084\n1161\n2496\n9128\n623\n3988\n24861\n12745\n899\n2269\n1596\n1182\n1297\n6391\n13093\n1200\n2897\n5054\n747\n3980\n35148\n26030\n3938\n\n\n2000-03-01\n4036\n6255\n30439\n2904\n3342\n27053\n17086\n21049\n44205\n74426\n20719\n386\n30504\n1355\n2429\n11691\n1578\n4259\n18767\n16971\n1474\n2034\n1548\n1088\n1220\n5528\n13645\n1368\n2717\n4950\n935\n3576\n36117\n31119\n4668\n\n\n2000-04-01\n4241\n4521\n25378\n2843\n5117\n30464\n22346\n26160\n45480\n49985\n17489\n221\n34478\n1593\n2711\n14141\n705\n6579\n22735\n20397\n1284\n2420\n1592\n1012\n1208\n5544\n13366\n1345\n2512\n4149\n941\n3850\n33792\n34824\n6890\n\n\n2000-05-01\n2841\n3914\n26163\n2793\n4152\n30775\n16357\n35869\n38350\n48937\n19398\n164\n34795\n1397\n2594\n13305\n679\n4625\n18399\n15769\n1042\n1833\n1167\n660\n743\n4225\n10878\n1067\n2205\n3643\n764\n3025\n23377\n33139\n7006\n\n\n2000-06-01\n2776\n3487\n28179\n3146\n5018\n26720\n18133\n31314\n47982\n53798\n17522\n440\n34660\n1715\n2924\n10555\n2749\n4740\n21042\n17217\n1545\n2480\n1170\n712\n982\n4047\n9054\n1363\n2196\n3544\n855\n2580\n21769\n35731\n7634\n\n\n\n\n\nShow the code\narrival_trans &lt;- arrival %&gt;%\n  mutate(year = year(`Month-Year`)) %&gt;%\n  group_by(year) %&gt;%\n  summarise(across(where(is.numeric), sum, na.rm = TRUE))\n\n#head(arrival_trans)\narrival_long &lt;- arrival_trans %&gt;%\n  mutate(year = as.ordered(year)) %&gt;%\n  pivot_longer(\n    cols = -year,\n    names_to = \"Country\",\n    values_to = \"Count\"\n  ) %&gt;%\n  filter(year %in% c(2000, 2005))  %&gt;%\n  group_by(Country) %&gt;%\n  ungroup()\n\n\nggplot_obj &lt;- newggslopegraph(\n  dataframe = arrival_long,\n  Times = year,\n  Measurement = Count,\n  Grouping = Country,\n  Title = \"Arrival Times by Country\",\n  SubTitle = \"2000-2025\",\n  Caption = \"Prepared by Cathy C.\",)\n\nggplot_obj \n\n\n\n\n\n\n\n\n\n\n\nLearning from the code\n\n\n\nnewggslopegraph() prefers an ordered sequence for its Times variable to ensure the correct chronological display of data points."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Ex02 - Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "Several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, one will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package.\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages; and\nplot composite figure by combing ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on_Ex02 - Beyond ggplot2 Fundamentals",
    "section": "2.2.1 Installing and loading the required libraries",
    "text": "2.2.1 Installing and loading the required libraries\nIn this exercise, besides tidyverse, four R packages will be used.\nThey are:\n\nggrepel: a R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: a R package provides some extra themes, geoms, and scales for ggplot.\nhrbrthemes: a R package provides typographu-centric themes and theme components for ggplot2.\npatchwork: a R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also load them onto the working R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse) #all packages are then installed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on_Ex02 - Beyond ggplot2 Fundamentals",
    "section": "2.2.2 Importing data",
    "text": "2.2.2 Importing data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyversepackage.\n\nlibrary(readr)\nexam_data &lt;- read_csv(\"Exam_data copy.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are ID, CLASS, GENDER and RACE.\nThe continuous attributes are MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on_Ex02 - Beyond ggplot2 Fundamentals",
    "section": "2.3.1 Working with ggrepel",
    "text": "2.3.1 Working with ggrepel\n\nApplied colors to differentiate genders.\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label_repel(aes(label = ID,\n                       colour = GENDER), #colour for gender\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on_Ex02 - Beyond ggplot2 Fundamentals",
    "section": "2.4.1 Working with ggtheme package",
    "text": "2.4.1 Working with ggtheme package\nggthemes provides ggplot2 themes that replicate the look of plots by Edward Tuffe, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\nUsed theme_stata()\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\",\n                 linewidth = 0.3) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_stata()\n\n\n\n\n\n\n\n\nIt also provides some extra geoms and scales fpr ggplot2. Consult this vignette to learn more. *Link is broken as of Jan 19."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbrthemes-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbrthemes-package",
    "title": "Hands-on_Ex02 - Beyond ggplot2 Fundamentals",
    "section": "2.4.2 Working with hrbrthemes package",
    "text": "2.4.2 Working with hrbrthemes package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"pink\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_text_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\nDisplay English scores.\n\nggplot(data=exam_data,\n       aes(x = ENGLISH)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of English scores\") +\n  theme_ipsum(axis_text_size = 18,\n              base_size = 15,\n              grid = \"Y\") \n\n\n\n\n\n\n\n\n\nTip\n\naxis_title_size argument is used to increase the font size of the axis title to 18.\nbase_size argument is used to increase the default axis label to 15.\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "title": "Hands-on_Ex02 - Beyond ggplot2 Fundamentals",
    "section": "2.5.1 Creating Composite Graphics: patchwork methods",
    "text": "2.5.1 Creating Composite Graphics: patchwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. The extension called patchwork is specially designed for combining separate ggplot 2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here is the general syntax that combines:\n\nTwo-column layout using the Plus sign +.\nParenthesis () to create a subplot group.\nTwo-row layout using the Division design /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on_Ex02 - Beyond ggplot2 Fundamentals",
    "section": "2.5.2 Combining two ggplot2 graphs",
    "text": "2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a a composite of two histograms created using patchwork. Code is pretty simple.\n\np1 + p2\n\n\n\n\n\n\n\n\n\npatchwork &lt;- p1 + p2\npatchwork & theme_stata()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on_Ex02 - Beyond ggplot2 Fundamentals",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using: - “/” operator to stack two ggplot2 graphs - “|” operator to place the plots beside each other - “()” operator to define the sequence of the plotting.\n\n(p1 / p2) | p99\n\n\n\n\n\n\n\n\n\nChanged the layout\n\np99 | ( p2 / p1)\n\n\n\n\n\n\n\n\n\n\nUsed theme_economist()\n\npatchwork &lt;- p99 | (p2 / p1)\npatchwork & theme_economist() +\n  theme(axis.title = element_text(size = rel(1)),\n        axis.text = element_text(size = 8))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on_Ex02 - Beyond ggplot2 Fundamentals",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p99) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\nChanged level tag and used a new theme theme_stata()\n\n((p1 / p2) | p99) +\n  plot_annotation(tag_levels = 'A') + \n  theme_stata()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on_Ex02 - Beyond ggplot2 Fundamentals",
    "section": "2.5.5 Creating figure with insert",
    "text": "2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np99 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\nUsed theme_economist() and altered the position of the top layer plot.\n\np99 + theme_economist() +\n  inset_element(p1,\n                   left = 0.5,\n                   bottom = 0,\n                   right = 1,\n                   top = 0.3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on_Ex02 - Beyond ggplot2 Fundamentals",
    "section": "2.5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p100\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\n\nUsed theme_stata() and changed layout.\n\npatchwork &lt;- p99 | (p1 / p2) \npatchwork & theme_stata()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands-on_Ex02 - Beyond ggplot2 Fundamentals",
    "section": "2.6 Reference",
    "text": "2.6 Reference\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data cisualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.4.1 Tooltip effect with tooltip aesthetic",
    "text": "3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, a ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved.\nFirst, an interactive vrsion of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#displaying-multiple-information-on-tooltip",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.5.1 Displaying multiple information on tooltip",
    "text": "3.5.1 Displaying multiple information on tooltip\n🎀 The content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class =\", exam_data$CLASS))\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks=NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#customising-tooltip-style",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.6.1 Customising Tooltip style",
    "text": "3.6.1 Customising Tooltip style\n🎀 Code chunk below uses opts_tooltip() of ggiraph to customise tooltip rendering by adding css declarations.\n\ntooltip_css &lt;- \"background-color: pink;  #&lt;&lt;\nfront-style:bold; color: #fff;\" #&lt;&lt;\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)\n\nNotice that the background colour of the tooltip is pink and the font colour is white and bold."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#displaying-statistics-on-tooltip",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.6.2 Displaying statistics on tooltip",
    "text": "3.6.2 Displaying statistics on tooltip\n🎀 Code chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores: \", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data,\n                  aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS,\n                   tooltip = after_stat(\n                     tooltip(y, ymax))),\n               fun.data = mean_se,\n               geom = GeomInteractiveCol,\n               fill = \"light blue\"\n              ) + \n              stat_summary(aes(y = MATHS),\n                fun.data = mean_se,\n                geom = \"errorbar\", width = 0.2, size = 0.2\n              )\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.6.3 Hover effect with data_id aesthetic",
    "text": "3.6.3 Hover effect with data_id aesthetic\n🎀 Code chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nInteractivity: Elements associated with a data_id (i.e. CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#styling-hover-effect",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.6.4 Styling hover effect",
    "text": "3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id=CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill:#202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e. CLASS) will be highlighted upon mouse hover.\n\n\n\n\n\n\nNote\n\n\n\nDifferent from previous example, in this example the css customisation request are encoded directly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#combining-tooltip-and-hover-effect",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.6.5 Combining tooltip and hover effect",
    "text": "3.6.5 Combining tooltip and hover effect\n🎀 There are time when we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS, #tooltip here\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #2020202;\"),\n    opts_hover_inv(css = \"opacity:0.2\")\n  )\n)\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e. CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#click-effect-with-onclick",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.6.6 Click effect with onclick",
    "text": "3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\n🎀 The code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID)) #onclic link here\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(onclick = onclick),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid JavaScript instructions.\n\n\n\n\n❓ string column in the dataset"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.6.7 Coordinated Multiple Views with ggiraph",
    "text": "3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\n⚠️ Note that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n\n🎯 The goal of patchwork is to make it ridiculously simple to combine separate ggplots into the same graphic. As such it tries to solve the same problem as gridExtra::grid.arrange() and cowplot::plot_grid but using an API that incites exploration and iteration, and scales to arbitrarily complex layouts.\np1 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID,),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data,\n             aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) + #patchwork here\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2),\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill:#202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n       ))\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.7.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "3.7.1 Creating an interactive scatter plot: plot_ly() method\n🎀 The tabset below shows an example of a basic interactive plot created with plot_ly().\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(\n  data=exam_data,\n  x = ~MATHS,\n  y = ~ENGLISH\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.7.2 Working with visual variable: plot_ly() method",
    "text": "3.7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data=exam_data,\n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.7.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplot().\n\nOriginal🌸 Practice\n\n\n\np &lt;- ggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\nggplotly(p)\n\n\n\n\n\nNotice that the only extra line needed in the code chunk is ggplotly()\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH,\n                color = RACE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.7.4 Coordinated multiple views with plotly",
    "text": "3.7.4 Coordinated multiple views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatter plots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\n\n⚠️ highlight_key(): This function simply creates an object of class crosstalk::SharedData. The reason it exists is to make it easier to teach others how to leverage its functionality in plotly. It also makes it more discoverable if one is already aware of highlight.\n🗺️ Read more on subplot()\n\n\nOriginal🌸 Practice I🌸 Practice II\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\nHover over on a data point in one of the scatterplots. A tooltip will appear and show its scores.\nClick on a data point in one of the scatterplots, and the corresponding point in the other plot will appear.\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH,\n                color = GENDER)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE,\n                color = GENDER)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH,\n                color = RACE)) +\n  geom_point(size=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE,\n                color = RACE)) +\n  geom_point(size=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight_key() simply creates object of class crosstalk::SharedData.\nLearn more about crosswalk."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#interactive-data-table-dt-package",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.8.1 Interactive Data Table: DT package",
    "text": "3.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript Library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class = \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#linked-brushing-crosstalk-method",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.8.2 Linked brushing: crosstalk method",
    "text": "3.8.2 Linked brushing: crosstalk method\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np &lt;- ggplot(d,\n            aes(ENGLISH,\n                MATHS)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\ngg &lt;- highlight(ggplotly(p),\n                \"plotly_selected\")\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths = 5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#ggiraph",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.9.1 ggiraph",
    "text": "3.9.1 ggiraph\nThis link provides online version of the reference gude and several useful articles. Use this link to download the PDF version of the reference guide.\n\nHow to plot with ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to create interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#plotly-for-r",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#plotly-for-r",
    "title": "Hands-on_Ex03 (1) - Programming Interactive Data Visualisation with R",
    "section": "3.9.2 plotly for R",
    "text": "3.9.2 plotly for R\n\nGetting started with Plotly in R\nA collection of plotly R graphs are available via this [link]\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this [link]\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nA interesting implementation of gganimate by SMU senior: How has Singapore changed since 2011?\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html",
    "title": "Hands-on_Ex04(2) - Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information.\nperformance package to visualise model diagnostics.\nparameters package to visualise model parameters."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#learning-outcome",
    "title": "Hands-on_Ex04(2) - Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information.\nperformance package to visualise model diagnostics.\nparameters package to visualise model parameters."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on_Ex04(2) - Visual Statistical Analysis",
    "section": "2 Visual Statistical Analysis with ggstatsplot",
    "text": "2 Visual Statistical Analysis with ggstatsplot\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n- to provide alternative statistical inference methods by default.\n- to follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. \nFor example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#getting-started",
    "title": "Hands-on_Ex04(2) - Visual Statistical Analysis",
    "section": "3 Getting started",
    "text": "3 Getting started\n\n3.1 Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n3.2 Importing data\n\n\n\n\n\n\nDIY\n\n\n\nImport Exam-csv data by using appropriate tidyverse package.\n\nexam &lt;- read_csv(\"Exam_data.csv\")\n\n\n\n\n\n3.3 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to build an visual of one-sample test on English scores.\n\n\nShow the code\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\nDefault information:\nstatistical details / Bayes Factor / sample sizes / distribution summary\n\n\n3.4 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favour of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favour of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favour of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes factor is often written as B10. It can be defined mathematically as:\n\\[\n\\frac{likelihood-of-data-given-H_1}{likelihood-of-data-given-H_0} = \\frac{P(D|H_1)}{P(D/H_0)}\n\\]\nThe Schwarz criterion is one of the easiest ways to calculate rough estimation of the Bayes factor.\n\n\n\n3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number.\nOne of the most common interpretation is this one - first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagemakers in 2013.\n\nBayes Factor\n\n\nIF B10 IS…\nTHEN YOU HAVE\n\n\n\n\n&gt;100\nExtreme evidence for H1\n\n\n30 - 100\nVery strong evidence for H1\n\n\n10 - 30\nStrong evidence for H1\n\n\n3 - 10\nModerate evidence for H1\n\n\n1 - 3\nAnecdotal evidence for H1\n\n\n1\nNo evidence\n\n\n1/3 - 1\nAnecdotal evidence for H1\n\n\n1/3 - 1/10\nModerate evidence for H1\n\n\n1/10 - 1/30\nStrong evidence for H1\n\n\n1/30 - 1/100\nVery Strong evidence for H1\n\n\n&lt;1/100\nExtreme evidence for H1\n\n\n\n\n\n3.6 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = GENDER,\n  y = MATHS,\n  type = \"np\",\n  message = FALSE\n)\n\n\n\n\n\n\n\n\n\nDefault information: statistical details / Bayes factor / samples sizes / distribution summary\n\n\n3.7 Oneway ANOVA Test: ggbetweentats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English scores by race.\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = RACE,\n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE,\n  pariwise.comparisons = TRUE,\n  pairwise.display = \"s\",\n  p.adjust.methods = \"fdr\",\n  message = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n“na” -&gt; only non-significant\n“s” -&gt; only significant\n“all” -&gt; everything\n\n\n3.7.1 ggbetweentats() - Summary of tests\n\nTestCISummary\n\n\nFollowing (between-subjects) tests are carried out for each type of analyses.\n\n\n\nTYPE\nNO. OF GROUPS\nTEST\n\n\n\n\nParametric\n&gt;2\nFisher’s or Welch’s one-way ANOVA\n\n\nNon-Parametric\n&gt;2\nKruskal-Wallis one-way ANOVA\n\n\nRobust\n&gt;2\nHeteroscedastic one-way ANOVA for trimmed means\n\n\nBayes Factor\n&gt;2\nFisher’s ANOVA\n\n\nParametric\n2\nStudent’s or Welch’s t-test\n\n\nNon-Parametric\n2\nMann-Whitney U test\n\n\nRobust\n2\nYuen’s test for trimmed means\n\n\nBayes Factor\n2\nStudent’s t-test\n\n\n\n\n\nThe following effect sizes (and confidence intervals) are available for each type of test\n\n\n\nSummary of multiple pairwise comparison tests supported in ggbetweenstats()\n\n\n\n\n\n\n\n3.8 Significant test of correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores. Practice using various subjects from the data and labeling functions.\n\n🌸 Practice I🌸 Practice IIExample\n\n\nMaths x Science; use labels to indicate races scoring 90 for both subjects.\n\n\nShow the code\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = SCIENCE,\n  label.var = RACE,\n  label.expression = MATHS &gt;= 90 & SCIENCE &gt;= 90,\n  marginal = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\nEnglish x Science; use labels to indicate genders scoring 90 for both subjects.\n\n\nShow the code\nggscatterstats(\n  data = exam,\n  x = ENGLISH,\n  y = SCIENCE,\n  label.var = GENDER,\n  label.expression = ENGLISH &gt;= 90 & SCIENCE &gt;= 90,\n  marginal = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.9 Significant test of association (dependence): ggbarstats()\nCode chunk below, the Maths scores are binned into a 4-class variable with cut()\n\n#load library\nlibrary(dplyr)\n\nexam1 &lt;- exam |&gt;\n  mutate(MATHS_bins = \n           cut(MATHS,\n               breaks = c(0,60,75,85,100)))\n\nggbarstats() is used to build a visual for Significant Test of Association in the code below.\n\n\nUsage\nggbarstats(\n  data,\n  x,\n  y,\n  counts = NULL,\n  type = \"parametric\",\n  paired = FALSE,\n  results.subtitle = TRUE,\n  label = \"percentage\",\n  label.args = list(alpha = 1, fill = \"white\"),\n  sample.size.label.args = list(size = 4),\n  digits = 2L,\n  proportion.test = results.subtitle,\n  digits.perc = 0L,\n  bf.message = TRUE,\n  ratio = NULL,\n  conf.level = 0.95,\n  sampling.plan = \"indepMulti\",\n  fixed.margin = \"rows\",\n  prior.concentration = 1,\n  title = NULL,\n  subtitle = NULL,\n  caption = NULL,\n  legend.title = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ggtheme = ggstatsplot::theme_ggstatsplot(),\n  package = \"RColorBrewer\",\n  palette = \"Dark2\",\n  ggplot.component = NULL,\n  ...\n)\n\n🌸 English by GENDER🌸 Science by RACEExample\n\n\nTo see English scores by genders.\n\n\nShow the code\nexam_E &lt;- exam |&gt;\n  mutate(ENGLISH_bins = \n           cut(ENGLISH,\n               breaks = c(0,60,75,85,100)))\n\nggbarstats(exam_E,\n           x = ENGLISH_bins,\n           y = GENDER)\n\n\n\n\n\n\n\n\n\n\n\nTo see Science scores by races.\n\n\nShow the code\nexam_S &lt;- exam |&gt;\n  mutate(SCIENCE_bins = \n           cut(SCIENCE,\n               breaks = c(0,60,75,85,100)))\n\nggbarstats(exam_S,\n           x = SCIENCE_bins,\n           y = RACE)\n\n\n\n\n\n\n\n\n\n\n\n\nggbarstats(exam1,\n           x = MATHS_bins,\n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html",
    "title": "Hands-on_Ex04(4) - Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for unbiased comparison between outlets, stores or business entities. We will learn the following in this chapter:\n\nPlot funnel plots using funnelPlotR package\nPlot static funnel plot with ggplot2 package\nplot interactive funnel plot by using both plotly R and ggplot2 packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html#overview",
    "title": "Hands-on_Ex04(4) - Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for unbiased comparison between outlets, stores or business entities. We will learn the following in this chapter:\n\nPlot funnel plots using funnelPlotR package\nPlot static funnel plot with ggplot2 package\nplot interactive funnel plot by using both plotly R and ggplot2 packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html#install-and-launch-r-packages",
    "title": "Hands-on_Ex04(4) - Funnel Plots for Fair Comparisons",
    "section": "2 Install and Launch R Packages",
    "text": "2 Install and Launch R Packages\nFour R packages will be used in this exercise:\n\nreadr: import csv to R\nFunnerPlotR: create funnel plot\nggplot2: create funner plot manually\nknitr: build static html table\nplotly: create interactive funner plot\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html#import-data",
    "title": "Hands-on_Ex04(4) - Funnel Plots for Fair Comparisons",
    "section": "3 Import Data",
    "text": "3 Import Data\nWe use a new set of data for this exercise - COVID-19_DKI_Jakarta as of 31st July 2021 from Open Data Covid-19 Provinsi DKI Jakarta portal. In this exercise, we will compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan).\nFirst, we import the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSub-district ID\nCity\nDistrict\nSub-district\nPositive\nRecovered\nDeath\n\n\n3172051003\nJAKARTA UTARA\nPADEMANGAN\nANCOL\n1776\n1691\n26\n\n\n3173041007\nJAKARTA BARAT\nTAMBORA\nANGKE\n1783\n1720\n29\n\n\n3175041005\nJAKARTA TIMUR\nKRAMAT JATI\nBALE KAMBANG\n2049\n1964\n31\n\n\n3175031003\nJAKARTA TIMUR\nJATINEGARA\nBALI MESTER\n827\n797\n13\n\n\n3175101006\nJAKARTA TIMUR\nCIPAYUNG\nBAMBU APUS\n2866\n2792\n27\n\n\n3174031002\nJAKARTA SELATAN\nMAMPANG PRAPATAN\nBANGKA\n1828\n1757\n26"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html#funnelplotr-methods",
    "title": "Hands-on_Ex04(4) - Funnel Plots for Fair Comparisons",
    "section": "4 FunnelPlotR Methods",
    "text": "4 FunnelPlotR Methods\nFunnelPlotR package uses ggplot to generate funner plots. It requires numerator (events of interest), denominator (population considered) and group. The key arguments selected for customisation are:\n\n\nFunnelPlotR Installation\ninstall.packages(\"FunnelPlotR\")\n\nlimit: plot limits (95 or 99)\nlabel_outliers: to label outliers (true or false)\nPoisson_limits: to add Poisson limits to the plot\nOD_adjust: to add overdispersed limits to the plot\nxrange and yrange: to specify the range to display for axes, acts like a zoom function\nOther aesthetic components, such as graph title, axis labels etc.\n\n\n4.1 FunnelPlotR methods: Basic plot\nThe code below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn\n\n\n\n\ngroup in this function is different from the scatterplot. Here is defines the level of the points to be plotted, ie., Sub-district, District or City. If City is chosen, there are only six data points.\nBy default, data_type argument is “SR”.\nlimit: Plot limits, accepted values are 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\n4.2 FunnelPlotR methods: Makeover 1\nAdjust code to make over the previous plot.\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05)\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code\n\n\n\n\n+data_type argument is used to change from default “SR” to “PR” (i.e., proportions).\n+xrange and yrange are used to set the range of x-axis and y-axis.\n\n\n\n\n\n4.3 FunnelPlotR methods: Makeover 2\nMakeover 2 is to add titles for x axis and y axis.\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by \\nCumulative Total Number of Postive Cases\",\n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\",\n  \n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from code\n\n\n\n\nlabel = NA argument is to remove the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on_Ex04(4) - Funnel Plots for Fair Comparisons",
    "section": "5 Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "5 Funnel Plot for Fair Visual Comparison: ggplot2 methods\nIn this exercise, we will build funnel plots step-by-step with ggplot2. This will enhance the skills using ggplot2 to customise specialised data visualisation like Funnel Plot.\n\n5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch:\n\ndrive cumulative death rate\nstandard error of cumulative death rate\n\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death/Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nfit.mean is computed by using the code below:\n\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n5.2 Calculate lower and upper limits for 95% and 99.9% CI\nNext, we will compute the lower and upper limits for 95% Confidence Interval.\n\n\nShow the code\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\ndfCI &lt;- data.frame(number.ll95, number.ul95, \n                   number.ll999, number.ul999,\n                   number.seq, fit.mean)\n\n\n\n\n\n\n\n\nNote\n\n\n\n95% of the data falls within 1.96 standard deviations of the mean.\n99.9% of the data falls within 3.29 standard deviations of the mean.\n\n\n\n\n5.3 Plot a static funnel plot\nUse the following code to plot a static funnel plot with ggplot2.\n\n\nShow the code\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label = `Sub-district`),\n             alpha = 0.4) +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll999),\n            size = 0.4,\n            colour = \"skyblue\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul999),\n            size = 0.4,\n            colour = 'skyblue') +\n  geom_hline(data = dfCI,\n             aes(yintercept = fit.mean),\n             size = 0.4,\n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0, 0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") +\n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") +\n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") +\n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 12),\n        legend.position = c(0.91, 0.85),\n        legend.title = element_text(size = 7),\n        legend.text = element_text(size = 7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\n5.4 Interactive funnel plot: plotly + ggplot2\nto make the funnel plot interactive, we can use ggplot2 together with ggplotly() from plotly R package.\n\n\nShow the code\nfp_ggplotly &lt;- ggplotly(p,\n                        tooltip = c(\"label\",\n                                    \"x\",\n                                    \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html#references",
    "title": "Hands-on_Ex04(4) - Funnel Plots for Fair Comparisons",
    "section": "6 References",
    "text": "6 References\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html",
    "title": "Hands-on_Ex04(3) - Visualising Uncertainty",
    "section": "",
    "text": "In this chapter, we will do hands-on in creating statistical graphics for visualising uncertainty.\n\nto plot statistics error bars by using ggplot2\nto plot interactive error bars by combining ggplot2, plotly and DT\nto create advanced using ggdist\nto create hypothetical outcome plots (HOPs) with ungeviz package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#learning-outcome",
    "title": "Hands-on_Ex04(3) - Visualising Uncertainty",
    "section": "",
    "text": "In this chapter, we will do hands-on in creating statistical graphics for visualising uncertainty.\n\nto plot statistics error bars by using ggplot2\nto plot interactive error bars by combining ggplot2, plotly and DT\nto create advanced using ggdist\nto create hypothetical outcome plots (HOPs) with ungeviz package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#getting-started",
    "title": "Hands-on_Ex04(3) - Visualising Uncertainty",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Installing and loading packages\nThe following R packages will be used for this exercise:\n\ntidyverse: a family of R packages for data science process\nplotly: can create interactive plot\ngganimate: can create animation plot\nDT: can display interactive HTML table\ncrosstalk: to implement cross-widget interactions (currently linked brushing and filtering)\nggdist: to visualise distribution and uncertainty\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, corsstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\n2.2 Importing data\nThe Exam_data.csv dataset will be used for this exercise.\n\nexam &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#visualising-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#visualising-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on_Ex04(3) - Visualising Uncertainty",
    "section": "3 Visualising the uncertainty of point estimates: ggplot2 methods",
    "text": "3 Visualising the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, such as a mean score. Uncertainty, is expressed as standard error, confidence interval, or credible interval. Don’t confuse the uncertainty of a point estimate with the variation in the sample.\nNow, we will plot error bars of MATHS scores by RACE using the data provided in exam tibble data frame.\nCode below will be used to derive the necessary summary statistics:\n\nCodeMathematics\n\n\n\nmy_sum &lt;- exam %&gt;%\n  #group the observation by RACE; group_by() from dplyr package\n  group_by(RACE) %&gt;% \n  \n  #compute the count of observations, mean, standard deviation\n  summarise( \n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n  ) %&gt;%\n  \n  #derive standard error of Maths by RACE\n  mutate(se=sd/sqrt(n-1)) \n\nThe output is saved as a tibble data table called my_sum.\n\n\n\n\n\n\nSummary of code above\n\n\n\n\ngroup_by() from dplyr package is used to group the observation by RACE\nsummarise() is used to compute count of observations, mean, standard deviation\nmutate() is used to derive standard error of MATHS by RACE\n\n\n\n\n\n\n\n\n\n🔑🔑🔑 Next code is used to display my_sum tibble data frame in an HTML table format.\n\nCodeTable\n\n\nknitr:::kable(head(my_sum),\n              format = 'html')\n\n\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\n3.1 Plotting standard error bars of point estimates\nNow, plotting the standard error bars for the mean score of MATHS by RACE.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummary of code above\n\n\n\n\nThe error bars are computed by using the formula mean +/- se\nFor geom_point(), it is important to indicate stat=\"identity\"\n\n\n\n\n\nggplot(my_sum) + \n  geom_errorbar(\n    aes(x = RACE,\n        ymin=mean-se,\n        ymax=mean+se),\n    width = 0.2,\n    colour = \"blue\",\n    alpha = 0.9,\n    size = 0.5\n  ) +\n  geom_point(\n    aes(x = RACE,\n        y = mean),\n    stat = \"identity\",\n    color = \"red\",\n    size = 2.5,\n    alpha = 1\n  ) +\n  ggtitle(\"Standard Error of Mean MATHS Score by RACE\")\n\n\n\n\n\n3.2 Plotting confidence interval of point estimates\nInstead of plotting error bars of point estimates, we can also plot Confidence Intervals of the mean scores of MATHS by RACE.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x = reorder(RACE, -mean),\n        ymin=mean-1.96*se,\n        ymax=mean+1.96*se),\n    width=0.2,\n    colour=\"darkgreen\",\n    alpha=0.9,\n    size=1\n  ) + \n  geom_point(aes(\n    x = RACE,\n    y = mean),\n    stat=\"identity\",\n    color=\"red\",\n    alpha=1,\n    size=5\n    ) +\n  labs(x = \"MATHS score\",\n       title = \"95% Confidence Interval of Mean MATHS Score by RACE\")\n\n\n\n\n\n\nSummary of code\n\n\n\n\nThe Confidence Intervals are computed by using the formula mean +/- 1.96*se\nThe error bars are sorted using the average maths scores\nlabs() argument of ggplot2 is used to change the x-axis label\n\n\n\n\n\n\n\n\n3.3 Visualising the uncertainty of point estimates with interactive error bars\nTo plot interactive error bars for the 99% Confidence Interval of the mean score for MATHS by RACE.\n\n\nThe primary use for SharedData is to be passed to Crosstalk-compatible widgets in place of a data frame. Each SharedData$new(...) call makes a new “group” of widgets that link to each other, but not to widgets in other groups. You can also use a SharedData object from Shiny code in order to react to filtering and brushing from non-widget visualizations (like ggplot2 plots).\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#install.packages(\"leaflet\")\nlibrary(shiny)\nlibrary(crosstalk)\nlibrary(leaflet)\nlibrary(DT)\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4.5,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(\n                     aes(x = reorder(RACE, -mean),\n                         ymin = mean-2.58*se,\n                         ymax = mean+2.58*se),\n                     width = 0.2,\n                     colour = \"blue\",\n                     alpha = 0.8,\n                     size = 0.6\n                   ) +\n                   geom_point(\n                     aes(x = RACE,\n                         y = mean,\n                         text = paste(\"Race: \", `RACE`,\n                                      \"&lt;br&gt;N: \", `n`,\n                                      \"&lt;br&gt;Avg. Scores: \", round(mean, digits = 2),\n                                      \"&lt;br&gt;95% CI:[\",\n                                      round((mean-2.58*se), digits = 2), \",\",\n                                      round((mean+2.58*se), digits = 2), \"]\")),\n                        stat = \"identity\",\n                        color = \"pink\",\n                        size = 2.5,\n                        alpha = 1) +\n                   xlab(\"Race\") +\n                   ylab(\"Average Scores\") +\n                   theme_minimal() +\n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.8, hjust = 1),\n                     plot.title = element_text(size = 8, face = \"bold\")) +\n                   ggtitle(\"99% Confidence Interval of &lt;br&gt;Average MATHS Score by RACE\")),\n                tooltip = \"text\"),\n       DT::datatable(shared_df,\n                     rownames = FALSE,\n                     class = \"compact\",\n                     width = \"150%\",\n                     options = list(pageLength = 10,\n                                    scrollX=T),\n                     colnames = c(\"No. of pupils\",\n                                  \"Avg. scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns = c('mean', 'sd', 'se'),\n                     digits = 2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#visualsing-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#visualsing-uncertainty-ggdist-package",
    "title": "Hands-on_Ex04(3) - Visualising Uncertainty",
    "section": "4 Visualsing Uncertainty: ggdist package",
    "text": "4 Visualsing Uncertainty: ggdist package\nggdist for distribution and uncertainty visualisation:\nIt is an R package that provides flexible set of ggplot2 geoms and stats designed for visualising distributions and uncertainty.\nIt can visualise both frequentist and Bayesian uncertainty. Uncertainty visualization can be unified through the perspective of distribution visualization.\n\nFrequentist model: one visualises confidence distribution or bootstrap distributions (see vignette (“freq-uncertainty-vis”) ::: column-margin ## Setup for Frequentist uncertainty visualization\n\n\n\nFrequentist uncertainty visualization Setup\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggdist)\nlibrary(ggplot2)\nlibrary(broom)\nlibrary(distributional)\n\ntheme_set(theme_ggdist())\n\nBayesian model: one visualises probability distributions (see tidyverse package that builds on top of ggdist)\n\n\n4.1 Visualising the uncertainty of point estimates: ggdist methods (I)\nstat_pointinterval() of ggdist is used in the code below to build a visualisation to display distribution of MATHS scores by RACE.\n\nPlotCode🎀 + arguments\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x= RACE,\n             y = MATHS)) +\n  stat_pointinterval(\n    color = \"skyblue\"\n  ) +\n  labs(\n    title = \"Visualising Confidence Intervals of Mean Scores for MATHS\",\n    subtitle = \"Mean point + multiple-interval plot\"\n  )\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments. See next tab for example.\n\n\n\n\nAdded the following arguments\n\n.width = 0.95\n.point = median\n.interval = qi\ncolor = red\n\n\n\nShow the code\ntheme_set(theme_bw())\n\nexam %&gt;%\n  ggplot(aes(\n    x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = 0.95,\n    .point = median,\n    .interval = qi,\n    color = \"red\") +\n  labs(title = \"Visualising Confidence Intervals of Median Scores for MATHS by RACE\",\n       subtitle = \"Median point + multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.2 Practice\n\n\n\n\n\n\nTip\n\n\n\nDIY to show 95% and 99% confidence intervals.\n\n\n\n\nShow the code\nexam %&gt;%\nggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE,\n    .width = c(0.95, 0.99),\n    aes(interval_color = stat(level)),\n    point_fill = \"grey\",\n    point_colour = \"grey\",\n    point_size = 5\n  ) +\n  #Define colors of the intervals\n  scale_color_manual(\n    values = c(\"steelblue\", \"pink\"),\n    aesthetics = \"interval_color\"\n  ) +\n  labs(\n    title = \"Visualising Confidence Intervals of Mean Scores for MATHS by RACE\",\n    subtitle = \"Mean point + multiple-interval plot\"\n  ) +\n  theme(\n    panel.background = element_rect(fill = \"transparent\", color = NA),\n    plot.background = element_rect(fill = \"transparent\", color = NA),\n    legend.background = element_rect(fill = \"transparent\", color = NA)\n  )\n\n\n\n\n\n\n\n\n\n\n\n4.3 Visualising the uncertainty of point estimates: ggdist methods (II)\nstat_gradientinterval() of ggdist is used in the code below to build a visualisation for displaying distribution of MATHS scores by RACE.\n\n\nShow the code\nexam %&gt;%\n  ggplot(\n    aes(x = RACE,\n        y = MATHS)) +\n  stat_gradientinterval(\n    fill = \"skyblue\",\n    show.legend = TRUE\n  ) +\n  labs(\n    title = \"Visualising Confidence Intervals of Mean Score for MATHS by RACE\",\n    subtitle = \"Gradient + interval plot\"\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on_Ex04(3) - Visualising Uncertainty",
    "section": "5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n1️⃣ Step 1: Install ungeviz package\ndevtools::install_github(\"wilkelab/ungeviz\")\n2️⃣ Step 2: Launch the application in R\n\nlibrary(ungeviz)\n\n\nMATHS by RACEENGLISH by RACESCIENCE by RACE\n\n\n\n\nShow the code\nggplot(data = exam,\n       aes(x = factor(RACE), y = MATHS)) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05),\n    size = 0.6, color = \"darkolivegreen\", alpha = 0.6) +\n  geom_hpline(data = sampler(25, group = RACE),\n              height = 0.6, color = \"pink\") +\n  theme_bw() +\n  transition_states(.draw, 1, 3)\n\n\n\n\n\n\n\n\n\nShow the code\n#.draw is a generated column indicating the sample draw.\n\n\n\n\n\n\nShow the code\nggplot(data = exam,\n       aes(x = factor(RACE), y = ENGLISH)) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05),\n    size = 0.5, color = \"skyblue\", alpha = 0.6) +\n  geom_hpline(data = sampler(25, group = RACE),\n              height = 0.6, color = \"azure4\") +\n  theme_bw() +\n  transition_states(.draw, 1, 3)\n\n\n\n\n\n\n\n\n\nShow the code\n#.draw is a generated column indicating the sample draw.\n\n\n\n\n\n\nShow the code\nggplot(data = exam,\n       aes(x = factor(RACE), y = SCIENCE)) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05),\n    size = 0.4, color = \"tan1\", alpha = 0.6) +\n  geom_hpline(data = sampler(25, group = RACE),\n              height = 0.6, color = \"pink1\") +\n  theme_bw() +\n  transition_states(.draw, 1, 3)\n\n\n\n\n\n\n\n\n\nShow the code\n#.draw is a generated column indicating the sample draw.\n\n\n\n\n\n\n\n\n\n📖 Reading resource for HOPs:\nhttps://medium.com/hci-design-at-uw/hypothetical-outcomes-plots-experiencing-the-uncertain-b9ea60d7c740"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html",
    "title": "Hands-on_Ex04 (1) - Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In Session 1, there are some of the popular statustistical graphics methods for visualising distribution, such as histogram, probability density curve (pdf), boxplot, notch plot and violin plot, and how they can be created using ggplot2.\nIn this session, we will learn two relatively new statistical graphic methods for visualisaing distribution, namely ridgeline plot and raincloud plot using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#learning-outcome",
    "title": "Hands-on_Ex04 (1) - Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In Session 1, there are some of the popular statustistical graphics methods for visualising distribution, such as histogram, probability density curve (pdf), boxplot, notch plot and violin plot, and how they can be created using ggplot2.\nIn this session, we will learn two relatively new statistical graphic methods for visualisaing distribution, namely ridgeline plot and raincloud plot using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#getting-started",
    "title": "Hands-on_Ex04 (1) - Visualising Distribution",
    "section": "2 Getting started",
    "text": "2 Getting started\n\n2.1 Installing and loading packages\nThe following R packages will be used for this exercise.\n\nggridges: a ggplot2 extension specially designed for plotting ridgeline plots\nggdist: a ggplot2 extension specially designed for visualising distribution and uncertainty.\ntidyverse: a family of R packages to meet the modern data science and visual communication needs\nggthemes: a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package.\ncolorspace: a R pckage provides a broad toolbox for selecting individual colours or colour palettes, manipulating these colours, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used loading these R pakcages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse)\n\n\n\n2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on_Ex04 (1) - Visualising Distribution",
    "section": "3 Visualising Distribution with Ridgeline Plot",
    "text": "3 Visualising Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\n\n❓ WHAT FOR\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than ~6 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\nFigure below is a ridgelines plot showing the distribution of English scores by class.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 2.5,\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, we will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot ridgeline plots. They are:\ngrom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n🌸 PracticeExample plot\n\n\nChanged colour fill, opacity, no grid lines and scale.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 5,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"pink\", 0.5),\n    color = \"#7097BB\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges(grid = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.2 Verying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid colour but rather with colours that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient().\nBoth geoms work just like geom_ridgeline() and geom_density_ridges()\n\n🌸 PracticeExample plot\n\n\nApplied a different filling colour scheme.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"G\") +\n  scale_x_continuous(name = \"English grades\",\n                     expand = c(0,0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n    theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(name = \"English grades\",\n                     expand = c(0,0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n    theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3 Mapping the probabilities directly onto color\nBesides providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n🌸 PracticeExample plot\n\n\nUsed scale_fill_viridis_b to replace scale_fill_viridis_c, and changed theme colour.\n❓ Need discrete data to use scale_fill_viridis_d ? &gt; see next example!\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom=\"density_ridges_gradient\",\n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_b(name = \"Tail probability\",\n                       option = \"B\",\n                       direction = -1) +\n  theme_ridges() \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom=\"density_ridges_gradient\",\n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important to include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n🌸 PracticeExample Plot\n\n\nChanged theme colours\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"Density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quantiles\",\n                       option = \"B\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"Density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quantiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cutting points such as 2.5% and 97.5% tails to colour the ridgeline plot, shown in figure below.\n\n📝 alpha in scale_fill_manual()\n\n🌸 PracticeExample Plot\n\n\nChanged colours fill\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = c(0.025, 0.975)\n  ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = alpha(c(\"#E76F51\", \"#FCEDA0\", \"#6AA68B\"), 0.5),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = c(0.025, 0.975)\n  ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#visualsing-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#visualsing-distribution-with-raincloud-plot",
    "title": "Hands-on_Ex04 (1) - Visualising Distribution",
    "section": "4 Visualsing Distribution with Raincloud Plot",
    "text": "4 Visualsing Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional boxplot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, we will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n4.1 Plotting a half eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualisation, which contains a half-density and a slab-interval.\n\n🌸 PracticeExample Plot\n\n\nWith slab interval; changed color for the slab & interval, points.\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               slab_color = \"black\",\n               slab_fill = \"pink\",\n               slab_linetype = \"dashed\",\n               slab_linewidth = 0.3,\n               slab_alpha = 0.6,\n               interval_colour = \"skyblue\",\n               point_fill = \"yellow\",\n               point_colour = \"red\",\n               point_size = 2\n) \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from code above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\n4.2 Adding boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n🌸 PracticeExample Plot\n\n\nChanged slab colour, fill, linetype to dotline, slab alpha, and added color to the boxplot. Outliers are shown as well.\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               slab_color = \"black\",\n               slab_fill = \"pink\",\n               slab_linetype = \"dashed\",\n               slab_linewidth = 0.3,\n               slab_alpha = 0.4,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               col = \"steelblue\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.3 Adding dot plot with stat_dots\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = \"left\" to indicate we want it on the left-hand side.\n\n🌸 PracticeExample Plot\n\n\nChanged stat_dots color by CLASS\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               slab_color = \"black\",\n               slab_fill = \"grey\",\n               slab_linetype = \"dashed\",\n               slab_linewidth = 0.3,\n               slab_alpha = 0.4,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               col = \"grey\",\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 2,\n            aes(color = CLASS))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4 Finishing touch\nLastly, coord_flit() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n🌸 PracticeExample Plot\n\n\nUsed a different theme theme_stata() and changed colours for the slab and dots.\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               slab_color = \"grey\",\n               slab_fill = \"#D6DED5\",\n               slab_linetype = \"solid\",\n               slab_linewidth = 0.4,\n               slab_alpha = 0.5,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 1.2,\n            aes(color = CLASS)) +\n              \n  coord_flip() +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n🎀️ Notice the there are fewer dots when using colours to display CLASS.\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 1.2) +\n  coord_flip() +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5 Reference\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms\nAdditional reference: Cedric Scherer Data Visualization & Info Disign [slides]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html",
    "title": "Hands-on_Ex03 (2) - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, I will create animated data visualisation with gganimate and plotly r packages. At the same time, I will learn how to 1/ reshape data by using tidyr package, and 2/ process, wrangle and transform datawith dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames - like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregated data.The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore diving into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualisation.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore starting making animated graphs, think of the question first:\nDoes it make sense to go through the effort?\nIf you are conducting an exploratory data analysis, an animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#basic-concepts-of-animation",
    "title": "Hands-on_Ex03 (2) - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames - like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregated data.The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#terminology",
    "title": "Hands-on_Ex03 (2) - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Before diving into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualisation.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore starting making animated graphs, think of the question first:\nDoes it make sense to go through the effort?\nIf you are conducting an exploratory data analysis, an animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#loading-the-r-packages",
    "title": "Hands-on_Ex03 (2) - Programming Animated Statistical Graphics with R",
    "section": "3-2.2.1 Loading the R packages",
    "text": "3-2.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly: R library for plotting interactive statistical graphs.\ngganimate: a ggplot extension for creating animated statistical graphs.\ngifski: converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminer: an excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse: a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#importing-the-data",
    "title": "Hands-on_Ex03 (2) - Programming Animated Statistical Graphics with R",
    "section": "3-2.2.2 Importing the data",
    "text": "3-2.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      shee=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nNote\n\n\n\n\nread_xls of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0 and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() show in the code chunk below.\n\n\n❓ mutate_at() links back to the same page in textbook?\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#building-a-static-population-bubble-plot",
    "title": "Hands-on_Ex03 (2) - Programming Animated Statistical Graphics with R",
    "section": "3-2.3.1 Building a static population bubble plot",
    "text": "3-2.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#building-the-animated-bubble-plot",
    "title": "Hands-on_Ex03 (2) - Programming Animated Statistical Graphics with R",
    "section": "3-2.3.2 Building the animated bubble plot",
    "text": "3-2.3.2 Building the animated bubble plot\nIn the code chunk below, - transition_time() of gganimate is used to create transition through distinct states in time (i.e. Year) - ease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n🌸 PracticeOriginal\n\n\n🌸 Different theme and title, ease_aes\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'The animated bubble chart | Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('cubic-in-out') +\n  theme_dark()\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#plot",
    "title": "Hands-on_Ex03 (2) - Programming Animated Statistical Graphics with R",
    "section": "Plot",
    "text": "Plot\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation. ## Code\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n::: Notice that although show.legend=FALSE argument was used, the legend still appears on the plot.\nTo overcome this problem, `theme(legend.position=‘none’) should be used. ::: panel-tabset ## Plot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#code",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#code",
    "title": "Hands-on_Ex03 (2) - Programming Animated Statistical Graphics with R",
    "section": "Code",
    "text": "Code\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n:::"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on_Ex03 (2) - Programming Animated Statistical Graphics with R",
    "section": "3-2.4.2 Building an animated bubble plot: plot_ly() method",
    "text": "3-2.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, we will learn how to create an animated bubble plot with plot_ly() method.\n\n🌸 PracticeOriginal\n\n\n🌸 Adjusted bubble sizes\n\nbp2 &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(2,500),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\n\nbp2\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(2,100),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\n\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "Learning objectives include the following: - create graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph - build network graph visualisation using appropriate function of ggraph - compute network geometrics using tidygraph - build advanced gragh visualisation by incorporating the network geometrics - build interactive network visualisation using visNetwork package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-edges-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-edges-data",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "3.1 The edges data",
    "text": "3.1 The edges data\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-nodes-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-nodes-data",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "3.2 The nodes data",
    "text": "3.2 The nodes data\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-network-data-from-files",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-network-data-from-files",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "3.3 Importing network data from files",
    "text": "3.3 Importing network data from files\nimport GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\npacman::p_load(readr, dplyr, lubridate, tidygraph, ggraph, visNetwork)\n\n\nGAStech_nodes &lt;- read_csv(\"GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"GAStech_email_edge-v2.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-imported-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-imported-data",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "3.4 Reviewing the imported data",
    "text": "3.4 Reviewing the imported data\nNext, we examine the structure of the data frame using glimpse() of dplyr.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\nNote\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. It is important to change the data type of SentDate field back to “Date”” data type."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-time",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-time",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "3.5 Wrangling time",
    "text": "3.5 Wrangling time\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\nLearn from the code\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewomg-the-revised-date-fields",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewomg-the-revised-date-fields",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "3.6 Reviewomg the revised date fields",
    "text": "3.6 Reviewomg the revised date fields\nTable below shows the data structure of the reformatted GAStech_edges data frame.\n\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-attributes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-attributes",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "3.7 Wrangling attributes",
    "text": "3.7 Wrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation. We will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\nLearn from the code\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-edges-file",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-edges-file",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "3.8 Reviewing the revised edges file",
    "text": "3.8 Reviewing the revised edges file\nTable below shows the data structure of the reformatted GAStech_edges data frame.\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-tbl_graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-tbl_graph-object",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "4.1 The tbl_graph object",
    "text": "4.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dplyr-verbs-in-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dplyr-verbs-in-tidygraph",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "4.2 The dplyr verbs in tidygraph",
    "text": "4.2 The dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "4.3 Using tbl_graph() to build tidygraph data model.",
    "text": "4.3 Using tbl_graph() to build tidygraph data model.\nIn this section, we will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\n🎯 Reference guide: tbl_graph()\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "4.4 Reviewing the output tidygraph’s graph object",
    "text": "4.4 Reviewing the output tidygraph’s graph object\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\nReview\n\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-active-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-active-object",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "4.5 Changing the active object",
    "text": "4.5 Changing the active object\nThe nodes tibble data frame is activated by default, but we can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange(). Visit the reference guide of activate() to find out more about the function.\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-basic-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-basic-network-graph",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "5.1 Plotting a basic network graph",
    "text": "5.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph.\n\n\nShow the code\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\nLaern from code\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-default-network-graph-theme",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-default-network-graph-theme",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "5.2 Changing the default network graph theme",
    "text": "5.2 Changing the default network graph theme\nIn this section, you will use theme_graph() to remove the x and y axes.\n\n\nShow the code\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph(background = \"#f1f4f5\")\n\n\n\n\n\n\n\n\n\n\n\nLearn from the code\n\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-coloring-of-the-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-coloring-of-the-plot",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3 Changing the coloring of the plot",
    "text": "5.3 Changing the coloring of the plot\ntheme_graph() makes it easy to change the coloring of the plot.\n\n\nShow the code\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50', size = 0.4)) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-ggraphs-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-ggraphs-layouts",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "5.4 Working with ggraph’s layouts",
    "text": "5.4 Working with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fruchterman-and-reingold-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fruchterman-and-reingold-layout",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5 Fruchterman and Reingold layout",
    "text": "5.5 Fruchterman and Reingold layout\nBelow plot the network graph using Fruchterman and Reingold layout.\n\n\nShow the code\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph(background = \"#f1f4f5\")\n\n\n\n\n\n\n\n\n\n\n\nLaern from code\n\n\n\nlayout argument is used to define the layout to be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-network-nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-network-nodes",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "5.6 Modifying network nodes",
    "text": "5.6 Modifying network nodes\nLet’s colour each node by referring to their respective departments.\n\n\nShow the code\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph(background = \"#f1f4f5\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-edges",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "5.7 Modifying edges",
    "text": "5.7 Modifying edges\nThickness of the edges will be mapped with the Weight variable.\n\n\nShow the code\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph(background = \"#f1f4f5\")\n\n\n\n\n\n\n\n\n\n\n\nLaern from code\n\n\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "6.1 Working with facet_edges()",
    "text": "6.1 Working with facet_edges()\n\nfacet_edges()theme()framedacet_nodes()\n\n\n\n\nShow the code\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday) +\n  theme_graph(background = \"#f1f4f5\")\n\n\n\n\n\n\n\n\n\n\n\nBelow uses theme() to change the position of the legend.\n\n\nShow the code\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday) +\n  theme_graph(background = \"#f1f4f5\")\n\n\n\n\n\n\n\n\n\n\n\nBelow adds frame to each graph.\n\n\nShow the code\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom') +\n  theme_graph(background = \"#f1f4f5\")\n\n\n\n\n\n\n\n\n\n\n\nfacet_nodes() is used for the plot below.\nThis function is equivalent to ggplot2::facet_wrap() but only facets nodes. Edges are drawn if their terminal nodes are both present in a panel.\n\n\nShow the code\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom') +\n  theme_graph(background = \"#f1f4f5\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "8.1 Data preparation",
    "text": "8.1 Data preparation\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-first-interactive-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-first-interactive-network-graph",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "8.2 Plotting the first interactive network graph",
    "text": "8.2 Plotting the first interactive network graph\nBelow is used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated,\n           background = \"#f1f4f5\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-layout",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "8.3 Working with layout",
    "text": "8.3 Working with layout\nFruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated,\n           background = \"#f1f4f5\") %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\nVisit Igraph to find out more about visIgraphLayout’s argument."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---nodes",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "8.4 Working with visual attributes - Nodes",
    "text": "8.4 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nRenamed Department field to group:\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nRun code, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\n visNetwork(GAStech_nodes,\n           GAStech_edges_aggregated,\n           background = \"#f1f4f5\") %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---edges",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "8.5 Working with visual attributes - Edges",
    "text": "8.5 Working with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges.\n\nThe argument arrows is used to define where to place the arrow.\nThe smooth argument is used to plot the edges using a smooth curve.\n\nVisit Option to find out more about visEdges’s argument.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated,\n           background = \"#f1f4f5\") %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactivity",
    "title": "Hands-on_Ex05 - Modelling, Visualising and Analysing Network Data with R",
    "section": "8.6 Interactivity",
    "text": "8.6 Interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\nVisit Option to find out more about visOption’s argument.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated,\n           background = \"#f1f4f5\") %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#comparison-of-r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#comparison-of-r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "1.1.1 Comparison of R Graphics VS ggplot",
    "text": "1.1.1 Comparison of R Graphics VS ggplot\n\n# ggplot(data=df) will just display an empty canvas.\n# setting aes(x=MATHS) just sets the x-axis to the range of values in the MATHS column\n# using geom_histogram \nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#bar-chart-with-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#bar-chart-with-geom_bar",
    "title": "Hands-on Exercise 1",
    "section": "1.2.1 Bar chart with geom_bar()",
    "text": "1.2.1 Bar chart with geom_bar()\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#kernel-density-estimate-with-geom_density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#kernel-density-estimate-with-geom_density",
    "title": "Hands-on Exercise 1",
    "section": "1.2.4 Kernel Density Estimate with geom_density()",
    "text": "1.2.4 Kernel Density Estimate with geom_density()\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           color=GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#boxplot-with-geom_boxplot",
    "title": "Hands-on Exercise 1",
    "section": "1.2.5 Boxplot with geom_boxplot()",
    "text": "1.2.5 Boxplot with geom_boxplot()\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n# notches are used to see if medians of the distributions differ\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot(notches=TRUE) # TRUE must be all caps\n\nWarning in geom_boxplot(notches = TRUE): Ignoring unknown parameters: `notches`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#violin-plot-with-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#violin-plot-with-geom_violin",
    "title": "Hands-on Exercise 1",
    "section": "1.2.6 Violin plot with geom_violin()",
    "text": "1.2.6 Violin plot with geom_violin()\nThis is for comparing multiple data distributions side by side. With density curves, as the lines may overlap with one another, it is more challenging to compare the different distributions.\n\nggplot(data=exam_data, \n       aes(y=MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatterplot-with-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatterplot-with-geom_point",
    "title": "Hands-on Exercise 1",
    "section": "1.2.7 Scatterplot with geom_point()",
    "text": "1.2.7 Scatterplot with geom_point()\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#combining-geom-objects",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#combining-geom-objects",
    "title": "Hands-on Exercise 1",
    "section": "1.2.8 Combining geom objects",
    "text": "1.2.8 Combining geom objects\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  geom_point(position=\"jitter\",\n             size=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-the-stat_summary-method",
    "title": "Hands-on Exercise 1",
    "section": "1.3.1 Using the stat_summary() method",
    "text": "1.3.1 Using the stat_summary() method\nThe box plot above doesn’t indicate the position of the means. By working with the stat_summary() function, we can indicate the mean values on the plot.\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom=\"point\",\n                fun=\"mean\",\n                colour=\"red\",\n                size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-geom-to-update-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-geom-to-update-stat",
    "title": "Hands-on Exercise 1",
    "section": "1.3.2 Using geom() to update stat",
    "text": "1.3.2 Using geom() to update stat\nOverriding the default stat, we can add the mean values as well.\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",\n             fun=\"mean\",\n             colour=\"red\",\n             size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-geom_smooth-to-add-best-fit-curve",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#using-geom_smooth-to-add-best-fit-curve",
    "title": "Hands-on Exercise 1",
    "section": "1.3.3 Using geom_smooth() to add best fit curve",
    "text": "1.3.3 Using geom_smooth() to add best fit curve\n\nggplot(data=exam_data, \n       aes(x=MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#wrapping-1d-sequence-of-panels-into-2d-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#wrapping-1d-sequence-of-panels-into-2d-with-facet_wrap",
    "title": "Hands-on Exercise 1",
    "section": "1.4.1 Wrapping 1d sequence of panels into 2d with facet_wrap()",
    "text": "1.4.1 Wrapping 1d sequence of panels into 2d with facet_wrap()\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#creating-matrix-of-panels-with-facet_grid",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#creating-matrix-of-panels-with-facet_grid",
    "title": "Hands-on Exercise 1",
    "section": "1.4.2 Creating matrix of panels with facet_grid()",
    "text": "1.4.2 Creating matrix of panels with facet_grid()\n\n# This should be similar to subplots\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#flipping-the-coordinates-with-coord_flip",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#flipping-the-coordinates-with-coord_flip",
    "title": "Hands-on Exercise 1",
    "section": "1.5.1 Flipping the coordinates with coord_flip()",
    "text": "1.5.1 Flipping the coordinates with coord_flip()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range-with-coord_cartesian",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range-with-coord_cartesian",
    "title": "Hands-on Exercise 1",
    "section": "1.5.2 Changing the y- and x-axis range with coord_cartesian()",
    "text": "1.5.2 Changing the y- and x-axis range with coord_cartesian()\n\nggplot(data=exam_data, \n       aes(x=MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#examples-of-different-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#examples-of-different-themes",
    "title": "Hands-on Exercise 1",
    "section": "1.6.1 Examples of different themes",
    "text": "1.6.1 Examples of different themes\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#age-sex-pyramid",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#age-sex-pyramid",
    "title": "Hands-on Exercise 1",
    "section": "1.7.1 Age-sex Pyramid",
    "text": "1.7.1 Age-sex Pyramid"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#pareto-chart",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#pareto-chart",
    "title": "Hands-on Exercise 1",
    "section": "1.7.2 Pareto Chart",
    "text": "1.7.2 Pareto Chart"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html",
    "title": "Take-home_Ex01 (Part 1): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "",
    "text": "The Singapore Department of Statistics regularly publishes data to provide a comprehensive view of the nation’s demographic landscape. One such dataset, Singapore Residents by Planning Area/Subzone, Single Year of Age and Sex (June 2024), offers granular insights into the spatial and age-sex distribution of Singapore’s resident population in 2024. It captures critical population attributes down to single years of age, disaggregated by gender and geographically mapped across planning areas and subzones defined under the Urban Redevelopment Authority’s Master Plan 2019.\nThese statistics serve as a foundational reference for urban planners, policymakers, and researchers to assess trends in population ageing, gender balance, and regional population concentration. In particular, they support decisions on infrastructure planning, public service allocation, and housing development strategies. Understanding the demographic structure in such detail allows for better anticipation of future needs across education, healthcare, and eldercare.\n\n\n\nAssuming the role of the graphical editor at a local media company, the task is to create compelling visualizations that highlight Singapore’s demographic structures and distribution in 2024. Using appropriate Exploratory Data Analysis (EDA) techniques and ggplot2, this post aims to:\n• Uncover the age and sex distribution across Singapore’s planning areas and subzones.\n• Identify population concentration hotspots and patterns of demographic imbalance.\n• Convey insights through at most three clear and informative data visualisations suitable for a general audience in a digital publication."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#background",
    "title": "Take-home_Ex01 (Part 1): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "",
    "text": "The Singapore Department of Statistics regularly publishes data to provide a comprehensive view of the nation’s demographic landscape. One such dataset, Singapore Residents by Planning Area/Subzone, Single Year of Age and Sex (June 2024), offers granular insights into the spatial and age-sex distribution of Singapore’s resident population in 2024. It captures critical population attributes down to single years of age, disaggregated by gender and geographically mapped across planning areas and subzones defined under the Urban Redevelopment Authority’s Master Plan 2019.\nThese statistics serve as a foundational reference for urban planners, policymakers, and researchers to assess trends in population ageing, gender balance, and regional population concentration. In particular, they support decisions on infrastructure planning, public service allocation, and housing development strategies. Understanding the demographic structure in such detail allows for better anticipation of future needs across education, healthcare, and eldercare."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#the-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#the-task",
    "title": "Take-home_Ex01 (Part 1): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "",
    "text": "Assuming the role of the graphical editor at a local media company, the task is to create compelling visualizations that highlight Singapore’s demographic structures and distribution in 2024. Using appropriate Exploratory Data Analysis (EDA) techniques and ggplot2, this post aims to:\n• Uncover the age and sex distribution across Singapore’s planning areas and subzones.\n• Identify population concentration hotspots and patterns of demographic imbalance.\n• Convey insights through at most three clear and informative data visualisations suitable for a general audience in a digital publication."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#importing-file-and-cheking",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#importing-file-and-cheking",
    "title": "Take-home_Ex01 (Part 1): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "3.1 Importing File and Cheking",
    "text": "3.1 Importing File and Cheking\n\n3.1.1 Importing File\nThe code chunk below is used to import the dataset (csv file) using read_csv().\n\nrespop &lt;- read_csv(\"respopagesex2024/respopagesex2024.csv\")\n\n\n\n3.1.2 Scanning the Data\nNext, for a better understanding of the dataset, glimpse() will be utilized to observe the variables and their data types:\n\nglimpse(respop)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\nAs shown, the dataset consists of 6 columns and over 60,424 rows (observations). Each observation represents a specific demographic segment of Singapore’s resident population, defined by:\n\nPA: Planning Area\nSZ: Subzone\nAge: Single year of age (0–90+)\nSex: Male or Female\n\nBased on the output of the code, there are 4 categorical variables (PA, SZ, Age, and Sex), 1 numerical variable (Pop), and 1 time variable (Time).\n\n\n3.1.3 Checking for Duplicates\nTo ensure data integrity, a check for duplicated records was conducted. Duplicated entries can result in inaccurate analysis due to double counting. The following code block uses group_by_all() and filter(n()\\&gt;1) from the dplyr package to identify fully duplicated rows:\n\nduplicate &lt;- respop %&gt;%\n  group_by_all() %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nduplicate\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PA &lt;chr&gt;, SZ &lt;chr&gt;, Age &lt;chr&gt;, Sex &lt;chr&gt;, Pop &lt;dbl&gt;,\n#   Time &lt;dbl&gt;\n\n\nThe result confirms that no duplicated rows exist.\nTo further verify that each record is unique, the number of distinct combinations across the key demographic variables (PA, SZ, Age, Sex, and Time) was computed:\n\nn_distinct(respop %&gt;% select(PA, SZ, Age, Sex, Time))\n\n[1] 60424\n\n\nThis confirms that all 60,424 rows in the dataset represent unique combinations, with no repetition across the key variables.\n\n\n3.1.4 Checking for Missing Values\nBefore proceeding with the analysis, it is also important to verify whether the dataset contains any missing values, as these may influence the accuracy and integrity of results.\nAn initial check was conducted using is.na() and sum() to detect any missing entries:\n\nwhich(is.na(respop))\n\ninteger(0)\n\nsum(is.na(respop))\n\n[1] 0\n\n\nThis confirms that there are no missing values in the dataset. All six variables (PA, SZ, AG, SEX, Pop, and Time) are complete and require no additional cleaning or row removal. Thus, the dataset is ready for subsequent analysis without further preprocessing."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#data-wrangling",
    "title": "Take-home_Ex01 (Part 1): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "3.2 Data Wrangling",
    "text": "3.2 Data Wrangling\n\n3.2.1 Selecting Variables\nVariable selection is a common step in data analysis, particularly when working with datasets containing numerous attributes—some of which may be redundant depending on the analysis objectives. However, the respopagesex2024 dataset is already well-structured and concise, consisting of six essential variables:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription of Variables in the `respopagesex` Dataset\n\n\n\nCategory\nVariable.Name\nDescription\nType\nValue\n\n\n\n\nGeography\nPA\nPlanning Area\nchar\ne.g. Ang Mo Kio\n\n\nGeography\nSZ\nSubzone\nchar\ne.g. Ang Mo Kio Town Centre\n\n\nDemographics\nAge\nAge (single year of age)\nchar\n0 to 90+\n\n\nDemographics\nSex\nGender\nchar\nMales, Females\n\n\nDemographics\nPop\nResident count (Rounded to nearest 10)\ndbl\n0, 10, 20, 30, ..., 1180\n\n\nMetadata\nTime\nYear of observation\ndbl\n2024\n\n\n\n\n\n\n\n\n\n\nrespop_description &lt;- data.frame(\n  Category = c(\"Geography\", \"Geography\", \"Demographics\", \"Demographics\", \"Demographics\", \"Metadata\"),\n  `Variable Name` = c(\"PA\", \"SZ\", \"Age\", \"Sex\", \"Pop\", \"Time\"),\n  Description = c(\"Planning Area\",\n                  \"Subzone\",\n                  \"Age (single year of age)\",\n                  \"Gender\",\n                  \"Resident count (Rounded to nearest 10)\",\n                  \"Year of observation\"),\n  Type = c(\"char\", \"char\", \"char\", \"char\", \"dbl\", \"dbl\"),\n  Value = c(\"e.g. Ang Mo Kio\",\n            \"e.g. Ang Mo Kio Town Centre\",\n            \"0 to 90+\",\n            \"Males, Females\",\n            \"0, 10, 20, 30, ..., 1180\",\n            \"2024\")\n)\n\nlibrary(kableExtra)\n\nkable(respop_description) %&gt;%\n  kable_styling(full_width = FALSE) %&gt;%\n  row_spec(0, bold = TRUE) %&gt;%\n  add_header_above(c(\"Description of Variables in the `respopagesex` Dataset\" = ncol(respop_description)), \n                   bold = TRUE, font_size = 16, color = \"#222222\")\n\n\n\n\nWhile the Time column contains only a single value (2024), indicating that the dataset reflects the demographic structure of Singapore for year 2024, it was retained to support reproducibility. This ensures compatibility should additional years be introduced in the future. As such, no variables were removed or renamed during the data preparation phase.\n\n\n3.2.2 Correcting Data Types\nAs shown above, the current data types of the variables are:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription of Variables in the `respopagesex` Dataset\n\n\n\nVariable.Name\nDescription\nType\nValue\n\n\n\n\nPA\nPlanning Area\nchar\ne.g. Ang Mo Kio\n\n\nSZ\nSubzone\nchar\ne.g. Ang Mo Kio Town Centre\n\n\nAge\nAge (single year of age)\nchar\n0 to 90+\n\n\nSex\nGender\nchar\nMales, Females\n\n\nPop\nResident count (Rounded to nearest 10)\ndbl\n0, 10, 20, 30, ..., 1180\n\n\nTime\nYear of observation\ndbl\n2024\n\n\n\n\n\n\n\n\n\n\nrespop_description &lt;- data.frame(\n  `Variable Name` = c(\"PA\", \"SZ\", \"Age\", \"Sex\", \"Pop\", \"Time\"),\n  Description = c(\"Planning Area\",\n                  \"Subzone\",\n                  \"Age (single year of age)\",\n                  \"Gender\",\n                  \"Resident count (Rounded to nearest 10)\",\n                  \"Year of observation\"),\n  Type = c(\"char\", \"char\", \"char\", \"char\", \"dbl\", \"dbl\"),\n  Value = c(\"e.g. Ang Mo Kio\",\n            \"e.g. Ang Mo Kio Town Centre\",\n            \"0 to 90+\",\n            \"Males, Females\",\n            \"0, 10, 20, 30, ..., 1180\",\n            \"2024\")\n)\n\nlibrary(kableExtra)\n\nkable(respop_description) %&gt;%\n  kable_styling(full_width = FALSE) %&gt;%\n  row_spec(0, bold = TRUE) %&gt;%\n  add_header_above(c(\"Description of Variables in the `respopagesex` Dataset\" = ncol(respop_description)), \n                   bold = TRUE, font_size = 16, color = \"#222222\")\n\n\n\n\nThe first four variables (PA, SZ, Age, Sex), all are currently typed as character (char). While character and factor are both used to store categorical values in R, their purposes differ:\n• character is more flexible for free-form text, such as names or labels that may change over time.\n• factor is more structured and suited for categorical data with a known, limited set of possible values, often used for grouping or plotting.\nGiven this distinction:\n• PA (Planning Area), SZ (Subzone), and Age (Age) are correctly stored as character since they represent a wide range of labels or identifiers that are not necessarily fixed.\n• Sex, however, only contains a small set of known categories (“Males”, “Females”), and is better modeled as a factor for consistency in grouping, analysis, and visualization.\nTo reflect this, the following code converts the Sex column to factor type:\n\nrespop$Sex &lt;- factor(respop$Sex, levels = c(\"Males\", \"Females\"))\n\nThis change ensures that Sex is treated as a proper categorical variable in downstream analysis and plotting.\nThe last two variables, Pop and Time, were initially stored as double-precision numeric values (dbl), which is the default numeric type in R for both whole numbers and decimals. However, since both variables contain only whole numbers, it is more semantically accurate and memory-efficient to convert them to integer (int) type.\n\nPop, which stores resident population counts (rounded to the nearest 10), holds only whole number values. Converting it to integer reinforces its role as a count-based measure.\nTime represents the year of observation and contains a single repeated value (2024). Converting it to integer clarifies its role as a discrete temporal marker.\n\nThe conversion is performed using as.integer() as follows:\n\nrespop$Time &lt;- as.integer(respop$Time)\nrespop$Pop &lt;- as.integer(respop$Pop)\n\nAfter applying the necessary type corrections, the variables and their data types are now summarized below:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRevised Description of Variables in the `respopagesex` Dataset\n\n\n\nVariable.Name\nDescription\nType\nValue\n\n\n\n\nPA\nPlanning Area\nchar\ne.g. Ang Mo Kio\n\n\nSZ\nSubzone\nchar\ne.g. Ang Mo Kio Town Centre\n\n\nAge\nAge (single year of age)\nchar\n0 to 90+\n\n\nSex\nGender\nfct\nMales, Females\n\n\nPop\nResident count (Rounded to nearest 10)\nint\n0, 10, 20, 30, ..., 1180\n\n\nTime\nYear of observation\nint\n2024\n\n\n\n\n\n\n\n\n\n\nrespop_description &lt;- data.frame(\n  `Variable Name` = c(\"PA\", \"SZ\", \"Age\", \"Sex\", \"Pop\", \"Time\"),\n  Description = c(\"Planning Area\",\n                  \"Subzone\",\n                  \"Age (single year of age)\",\n                  \"Gender\",\n                  \"Resident count (Rounded to nearest 10)\",\n                  \"Year of observation\"),\n  Type = c(\"char\", \"char\", \"char\", \"fct\", \"int\", \"int\"),\n  Value = c(\"e.g. Ang Mo Kio\",\n            \"e.g. Ang Mo Kio Town Centre\",\n            \"0 to 90+\",\n            \"Males, Females\",\n            \"0, 10, 20, 30, ..., 1180\",\n            \"2024\")\n)\n\nlibrary(kableExtra)\n\nkable(respop_description) %&gt;%\n  kable_styling(full_width = FALSE) %&gt;%\n  row_spec(0, bold = TRUE) %&gt;%\n  add_header_above(c(\"Revised Description of Variables in the `respopagesex` Dataset\" = ncol(respop_description)), \n                   bold = TRUE, font_size = 16, color = \"#222222\")\n\n\n\n\n\n\n\n\n\n\n\nRevised Description of Variables in the `respopagesex` Dataset\n\n\n\nVariable.Name\nDescription\nType\nValue\n\n\n\n\nPA\nPlanning Area\nchar\ne.g. Ang Mo Kio\n\n\nSZ\nSubzone\nchar\ne.g. Ang Mo Kio Town Centre\n\n\nAge\nAge (single year of age)\nchar\n0 to 90+\n\n\nSex\nGender\nfct\nMales, Females\n\n\nPop\nResident count (Rounded to nearest 10)\nint\n0, 10, 20, 30, ..., 1180\n\n\nTime\nYear of observation\nint\n2024\n\n\n\n\n\n\n\n\n\n\nThis can be confirmed via:\n\nglimpse(respop)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;fct&gt; Males, Females, Males, Females, Males, Females, Males, Females, M…\n$ Pop  &lt;int&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;int&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\n3.2.3 Creating New Variables\nTo facilitate age-based demographic analysis, a new variable Age_Group was created by binning the Age field into 10-year intervals. This transformation enables grouped aggregation and more interpretable visualizations.\nThe Age variable in the dataset is stored as a character string, containing values such as “0”, “1”, …, “89”, and “90_and_Over”. Using mutate() and case_when() from the dplyr package, each age was categorized into its respective age band, ranging from “0-9” up to “90+”.\n\nrespop &lt;- respop %&gt;%\n  mutate(Age_Group = case_when(\n    Age %in% as.character(0:9) ~ \"0-9\",\n    Age %in% as.character(10:19) ~ \"10-19\",\n    Age %in% as.character(20:29) ~ \"20-29\",\n    Age %in% as.character(30:39) ~ \"30-39\",\n    Age %in% as.character(40:49) ~ \"40-49\",\n    Age %in% as.character(50:59) ~ \"50-59\",\n    Age %in% as.character(60:69) ~ \"60-69\",\n    Age %in% as.character(70:79) ~ \"70-79\",\n    Age %in% as.character(80:89) ~ \"80-89\",\n    Age == \"90_and_Over\" ~ \"90+\"\n  ))\n\nAfter this transformation, the dataset now includes a new column Age_Group, which categorizes each individual into broader age segments, supporting age-grouped aggregation for subsequent visual and statistical analysis.\n\nglimpse (respop)\n\nRows: 60,424\nColumns: 7\n$ PA        &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang…\n$ SZ        &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo …\n$ Age       &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", …\n$ Sex       &lt;fct&gt; Males, Females, Males, Females, Males, Females, Males, Femal…\n$ Pop       &lt;int&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, …\n$ Time      &lt;int&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, …\n$ Age_Group &lt;chr&gt; \"0-9\", \"0-9\", \"0-9\", \"0-9\", \"0-9\", \"0-9\", \"0-9\", \"0-9\", \"0-9…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#population-by-age-group",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#population-by-age-group",
    "title": "Take-home_Ex01 (Part 1): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "4.1 Population by Age Group",
    "text": "4.1 Population by Age Group\nTo understand the age structure of the population, a bar chart was generated to visualize the total resident population by single-year age group (Age_Group). The chart displays a clear distribution across age brackets ranging from infancy (age 0) to the elderly population (90+). This allows for the identification of key demographic cohorts, such as school-age children, working-age adults, and seniors.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(respop, aes(x = Age_Group, y = Pop)) +\n  geom_col(fill = \"#4682B4\") +\n  labs(\n    title = \"Singapore Resident Population by Age Groups (2024)\",\n    subtitle = \"Source: Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024\\nby Department of Statistics, Singapore (DOS)\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    plot.margin = margin(t = 20, r = 40, b = 10, l = 10),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 18),\n    plot.subtitle = element_text(hjust = 0.5, size = 10, color = \"grey30\"),\n    axis.text.x = element_text(angle = 90, hjust = 1, size = 11, color = \"black\"),\n    axis.text.y = element_text(size = 11, color = \"black\"),\n    plot.background = element_rect(fill = \"#f5f5f5\", colour = \"#f5f5f5\")\n  ) +\n  scale_y_continuous(labels = scales::comma)\n\n\n\n\nThe visualisations reveal clear patterns in Singapore’s demographic structure in terms of age. The first bar chart shows that the population is concentrated in the working-age groups (30–59), with a notable continuation into the 60–69 group—together forming the largest segments. This suggests a strong labor force base with a significant proportion approaching retirement. Meanwhile, the youngest age groups (0–9, 10–19) and the elderly (70-79, 80–89, and 90+) represent smaller proportions, the former of which points to possibly declining birth rates.\nThis age distribution shows that Singapore may face challenges in the future due to its ageing population. For now, the population steadily increases from young adults to those in their 60s, suggesting a stable group of working-age residents. However, there are fewer young people, which raises concerns about whether there will be enough residents to replace the current workforce over time. Also, as the current labor force will be moving into retirement and fewer younger people will enter the workforce, there may be a rise in the number of dependents compared to workers. To prepare for this, Singapore will need long-term planning in areas like healthcare, eldercare, and policies that encourage higher birth rates or even immigration to support future population needs."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#population-by-gender-and-age-group",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#population-by-gender-and-age-group",
    "title": "Take-home_Ex01 (Part 1): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "4.2 Population by Gender and Age Group",
    "text": "4.2 Population by Gender and Age Group\nTo gain further insight into population distribution across age brackets, a grouped bar chart taking gender into account is plotted. This visual groups males and females side-by-side for each age group bin, offering a straightforward comparison across life stages. In this chart, males are represented in blue and females in pink, ensuring clarity and easy interpretation.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(respop, aes(x = Age_Group, y = Pop, fill = Sex)) +\n  geom_col(position = \"dodge\") +\n  scale_fill_manual(values = c(\"Males\" = \"#336699\", \"Females\" = \"#CC3366\")) +\n  labs(\n    title = str_wrap(\"Singapore Resident Population by Age Groups and Gender (2024)\", width = 50),\n    subtitle = \"Source: Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024\\nby Department of Statistics, Singapore (DOS)\",\n    x = NULL,\n    y = NULL,\n    fill = \"Gender\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 18),\n    plot.subtitle = element_text(hjust = 0.5, size = 10, color = \"grey30\"),\n    axis.text.x = element_text(angle = 90, hjust = 1, size = 11, color = \"black\"),\n    axis.text.y = element_text(size = 11, color = \"black\"),\n    legend.text = element_text(size = 12),\n    plot.background = element_rect(fill = \"#f5f5f5\", colour = \"#f5f5f5\")\n  )\n\n\n\n\nThe gender-disaggregated age distribution highlights both demographic symmetry and divergence across life stages. From ages 0 to 49, the number of males and females is relatively balanced, with only minor variations. However, in the 50–59 age group, females begin to noticeably outnumber males. Although this difference persists, the gap narrows slightly in the 60–69 group and 80-89 group before widening again in the 90+ group, where the disparity is most pronounced—females nearly double the male population. Interestingly, the 70–79 cohort shows a temporary reversal, with males slightly outnumbering females, suggesting that survival rates can vary across specific age bands despite overall trends in female longevity. These patterns reflect Singapore’s broader demographic trajectory: gender parity during early and working years, and increasing female dominance in the oldest segments. These insights emphasize the importance of gender-responsive planning in healthcare, eldercare, and retirement policy design."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#population-by-planning-area",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01(1).html#population-by-planning-area",
    "title": "Take-home_Ex01 (Part 1): Investigating Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex at June 2024 by Data Visualisations",
    "section": "4.3 Population by Planning Area",
    "text": "4.3 Population by Planning Area\nThe PA variable, representing Planning Area, was analyzed to understand the spatial distribution of Singapore’s resident population. A horizontal bar chart was plotted, with areas sorted in descending order of population to clearly highlight disparities between more and less densely populated regions. To maintain legibility and avoid overcrowding the chart, only the top 40 planning areas were displayed. This selection provides a view of the most relevant population centers while ensuring the visualization remains clear and interpretable.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrespop %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total = sum(Pop)) %&gt;%\n  arrange(desc(Total)) %&gt;%\n  slice_head(n = 40) %&gt;%\n  ggplot(aes(x = reorder(PA, Total), y = Total, fill = Total)) +\n  geom_col() +\n  coord_flip() +\n  scale_y_continuous(labels = comma) +  # format x-axis (now horizontal due to coord_flip)\n  scale_fill_gradient(low = \"#c6dbef\", high = \"#08306b\") +\n  guides(fill = \"none\") +  # remove legend\n  labs(\n    title = str_wrap(\"Top 40 Planning Areas by Singapore Resident Population (2024)\", width = 60),\n    subtitle = \"Source: Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024\\nby Department of Statistics, Singapore (DOS)\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 18),\n    plot.subtitle = element_text(hjust = 0.5, size = 10, color = \"grey30\"),\n    axis.text.x = element_text(size = 11, color = \"black\"),\n    axis.text.y = element_text(size = 8, color = \"black\", margin = margin(r = 4)),  # reduce overlap\n    plot.background = element_rect(fill = \"#f5f5f5\", colour = \"#f5f5f5\")\n  )\n\n\n\n\nThis visualisation reveals interesting insights into spatial population concentration in Singapore in 2024. As can be seen from the chart, Tampines, Bedok, and Sengkang emerge as the most populated areas, each exceeding 200,000 residents. In contrast, areas like Western Water Catchment, Sungei Kadut, and Orchard sit at the lower end of the scale. The gradient color fill emphasizes the stark contrast between high- and low-density regions.\nRemarkably, just the top 10 planning areas account for over 50% of the total population of these 40 planning areas, while the top 20 hold more than 75% of the residents. This highlights how urban dwellers are heavily concentrated in a limited number of zones. Furthermore, the top 5 areas collectively house more than 10 times the population of the bottom 5 combined, illustrating stark spatial inequality. These insights on the spatial distribution of Singapore residents support targeted infrastructure investment and equitable resource planning across Singapore’s diverse planning areas."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "",
    "text": "Clepper Jessen, an investigative journalist, is probing potential corruption in Oceanus following the temporary closure of Nemo Reef and the shadowy arrival of pop star Sailor Shift. A knowledge graph constructed from intercepted radio communications offers a detailed map of interactions between people and vessels over the past two weeks. By analyzing these communications — who talks to whom and about what — this report aims to uncover key social groupings, identify individuals using pseudonyms, and uncover hidden networks that may be linked to corruption to support the investigation."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-knowledge-graph-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-knowledge-graph-data",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "4.1 Importing Knowledge Graph Data",
    "text": "4.1 Importing Knowledge Graph Data\nWe begin by loading the raw knowledge graph and its schema using the jsonlite package. The main data file (MC3_graph.json) contains two primary components: nodes and edges, which represent entities and their interactions. The accompanying schema file (MC3_schema.json) provides structural metadata that helps us understand the types and attributes of each node and edge in the graph.\n\ngraph_data &lt;- fromJSON(\"data/MC3_graph.json\")\nschema_data &lt;- fromJSON(\"data/MC3_schema.json\")\n\nThese files form the foundation for all subsequent data wrangling and analysis. In the next steps, we will explore their structure and extract relevant features to support our investigation into entity relationships and pseudonym usage."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#inspecting-knowledge-graph-structure",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#inspecting-knowledge-graph-structure",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "4.2 Inspecting Knowledge Graph Structure",
    "text": "4.2 Inspecting Knowledge Graph Structure\nBefore proceeding with data wrangling, we first inspect the structure of the knowledge graph using glimpse() to understand the overall layout of nodes and edges.\n\nglimpse(graph_data)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi FALSE\n $ graph     :List of 4\n  ..$ mode        : chr \"static\"\n  ..$ edge_default: Named list()\n  ..$ node_default: Named list()\n  ..$ name        : chr \"VAST_MC3_Knowledge_Graph\"\n $ nodes     :'data.frame': 1159 obs. of  31 variables:\n  ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  ..$ findings         : chr [1:1159] NA NA NA NA ...\n  ..$ content          : chr [1:1159] NA NA NA NA ...\n  ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  ..$ results          : chr [1:1159] NA NA NA NA ...\n  ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  ..$ destination      : chr [1:1159] NA NA NA NA ...\n  ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  ..$ thing_collected  :'data.frame':   1159 obs. of  2 variables:\n  .. ..$ type: chr [1:1159] NA NA NA NA ...\n  .. ..$ name: chr [1:1159] NA NA NA NA ...\n  ..$ reference        : chr [1:1159] NA NA NA NA ...\n  ..$ date             : chr [1:1159] NA NA NA NA ...\n  ..$ time             : chr [1:1159] NA NA NA NA ...\n  ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  ..$ operational_role : chr [1:1159] NA NA NA NA ...\n $ edges     :'data.frame': 3226 obs. of  5 variables:\n  ..$ id         : chr [1:3226] \"2\" \"3\" \"5\" \"3013\" ...\n  ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  ..$ source     : chr [1:3226] \"Sam\" \"Sam\" \"Sam\" \"Sam\" ...\n  ..$ target     : chr [1:3226] \"Relationship_Suspicious_217\" \"Event_Communication_370\" \"Event_Assessment_600\" \"Relationship_Colleagues_430\" ...\n  ..$ type       : chr [1:3226] NA \"sent\" NA NA ...\n\nglimpse(schema_data)\n\nList of 1\n $ schema:List of 2\n  ..$ nodes:List of 3\n  .. ..$ Entity      :List of 2\n  .. ..$ Event       :List of 2\n  .. ..$ Relationship:List of 2\n  ..$ edges:List of 3\n  .. ..$ description: chr \"Connections between nodes in the knowledge graph\"\n  .. ..$ is_inferred: chr \"bool\"\n  .. ..$ types      :'data.frame':  6 obs. of  5 variables:\n\n\nThe graph structure contains:\n\n1159 nodes, each representing an entity, event, or relationship (Unlike traditional network graphs where nodes represent only entities and edges represent relationships, the VAST Challenge MC3 knowledge graph treats relationships as nodes too.)\n3226 edges, which describe the connections between these nodes\nNodes vary by type and sub_type, and contain attributes such as label, name, and a large number of optional fields (e.g., timestamp, content, assessment_type) depending on the node’s sub_type\n\nThe schema file describes the expected structure and data types for each node and edge type. It confirms that the dataset follows a consistent schema, but many fields are sparse due to their relevance only to specific node types.\nSome observations are:\n\nThe dataset contains a large number of attributes, but most are sparsely populated, which is expected, as different node types carry different metadata.\nCommunication Event nodes are of particular interest for this analysis, as they contain the message content and timestamps—crucial for exploring interaction patterns, associated groups, and pseudonym usage.\nMany names appear under label and name fields, including potential aliases. These will need to be cross-checked and standardized for accurate network mapping.\n\nWe will also need to clean and enrich the data by:\n\nConverting timestamp fields to datetime\nIsolating sender-receiver relationships\nLinking communication content back to referenced entities (e.g., vessels or pseudonyms mentioned)\n\nThese steps are foundational for tracing communication & relationships, uncovering social groups, and identifying pseudonym patterns—all central to answering Questions 2 and 3."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extracting-the-edges-and-nodes-tables",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extracting-the-edges-and-nodes-tables",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "4.3 Extracting the Edges and Nodes Tables",
    "text": "4.3 Extracting the Edges and Nodes Tables\nTo prepare for further analysis, we extract the graph’s nodes and edges components into tidy tibbles. This allows us to explore, filter, and join the data more efficiently using dplyr and tidyverse tools.\n\nnodes_tbl &lt;- as_tibble(graph_data$nodes)\nedges_tbl &lt;- as_tibble(graph_data$edges)\n\nhead(nodes_tbl)\n\n# A tibble: 6 × 31\n  type   label   name  sub_type id    timestamp monitoring_type findings content\n  &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;  \n1 Entity Sam     Sam   Person   Sam   &lt;NA&gt;      &lt;NA&gt;            &lt;NA&gt;     &lt;NA&gt;   \n2 Entity Kelly   Kelly Person   Kelly &lt;NA&gt;      &lt;NA&gt;            &lt;NA&gt;     &lt;NA&gt;   \n3 Entity Nadia … Nadi… Person   Nadi… &lt;NA&gt;      &lt;NA&gt;            &lt;NA&gt;     &lt;NA&gt;   \n4 Entity Elise   Elise Person   Elise &lt;NA&gt;      &lt;NA&gt;            &lt;NA&gt;     &lt;NA&gt;   \n5 Entity Liam T… Liam… Person   Liam… &lt;NA&gt;      &lt;NA&gt;            &lt;NA&gt;     &lt;NA&gt;   \n6 Entity Samant… Sama… Person   Sama… &lt;NA&gt;      &lt;NA&gt;            &lt;NA&gt;     &lt;NA&gt;   \n# ℹ 22 more variables: assessment_type &lt;chr&gt;, results &lt;chr&gt;,\n#   movement_type &lt;chr&gt;, destination &lt;chr&gt;, enforcement_type &lt;chr&gt;,\n#   outcome &lt;chr&gt;, activity_type &lt;chr&gt;, participants &lt;int&gt;,\n#   thing_collected &lt;df[,2]&gt;, reference &lt;chr&gt;, date &lt;chr&gt;, time &lt;chr&gt;,\n#   friendship_type &lt;chr&gt;, permission_type &lt;chr&gt;, start_date &lt;chr&gt;,\n#   end_date &lt;chr&gt;, report_type &lt;chr&gt;, submission_date &lt;chr&gt;,\n#   jurisdiction_type &lt;chr&gt;, authority_level &lt;chr&gt;, coordination_type &lt;chr&gt;, …\n\nhead(edges_tbl)\n\n# A tibble: 6 × 5\n  id    is_inferred source target                      type \n  &lt;chr&gt; &lt;lgl&gt;       &lt;chr&gt;  &lt;chr&gt;                       &lt;chr&gt;\n1 2     TRUE        Sam    Relationship_Suspicious_217 &lt;NA&gt; \n2 3     FALSE       Sam    Event_Communication_370     sent \n3 5     TRUE        Sam    Event_Assessment_600        &lt;NA&gt; \n4 3013  TRUE        Sam    Relationship_Colleagues_430 &lt;NA&gt; \n5 &lt;NA&gt;  TRUE        Sam    Relationship_Friends_272    &lt;NA&gt; \n6 &lt;NA&gt;  TRUE        Sam    Relationship_Colleagues_215 &lt;NA&gt; \n\n\nThe nodes_tbl contains 1,159 rows and 31 columns, including attributes like type, label, sub_type, and content. Meanwhile, the edges_tbl captures 3,226 connections among these nodes, indicating the flow of communication or relationships via source, target, and type.\nTo understand the distribution of node types, we generate a quick summary:\n\ntable(nodes_tbl$type)\n\n\n      Entity        Event Relationship \n          72          802          285 \n\n\nMost nodes represent Events, which includes communication, assessments, and movements. These are the core of the graph’s activity and will be our main focus moving forward. The remaining nodes represent Relationships (such as colleagues) and Entities (such as people and vessels).\nThis breakdown helps guide our filtering in the next steps—particularly in isolating Communication Events and linking them to relevant people, vessels, and aliases for Questions 2 and 3."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#initial-eda",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#initial-eda",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "4.4 Initial EDA",
    "text": "4.4 Initial EDA\nTo better understand the characteristics of the dataset, we use the ExpCatViz() function from the SmartEDA package to examine the distribution of key categorical variables within nodes_tbl.\n\nExpCatViz(data = nodes_tbl, col = \"lightblue\")\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n\n\n\n\n[[7]]\n\n\n\n\n\n\n\n\n\n\n[[8]]\n\n\n\n\n\n\n\n\n\n\n[[9]]\n\n\n\n\n\n\n\n\n\n\n[[10]]\n\n\n\n\n\n\n\n\n\n\n[[11]]\n\n\n\n\n\n\n\n\n\n\n[[12]]\n\n\n\n\n\n\n\n\n\n\n[[13]]\n\n\n\n\n\n\n\n\n\n\n[[14]]\n\n\n\n\n\n\n\n\n\nThis reveals several useful insights:\n\nThe majority of nodes are of type Event (69%), followed by Relationship (25%) and Entity (6%). This confirms that the dataset is heavily event-driven, reinforcing the need to filter and analyze communication-related events in depth.\nMost of the categorical fields—such as monitoring_type, assessment_type, movement_type, and enforcement_type—are overwhelmingly sparse, with over 90% of values marked as NA. These attributes are subtype-specific and not useful for broad filtering.\nVariables like activity_type, reference, date, and time show close to 100% missingness, suggesting they were either not captured in the graph or only used in a few isolated node types.\nThese early signals reinforce the idea that the most promising and information-rich nodes for analysis are Communication Event nodes, which are expected to contain fields like content, timestamp, and be connected to both people and vessels.\n\nTo complement our earlier inspection of node attributes, we examine the categorical distribution in the edges_tbl using ExpCatViz().\n\nExpCatViz(data = edges_tbl, col = \"lightblue\")\n\n[[1]]\n\n\n\n\n\n\n\n\n\nThis reveals the breakdown of type within the edges:\n\nThe two most frequent edge types are evidence_for (32%) and NA (also 32%). The former indicates that a communication or event node is cited as evidence for another node (typically a relationship or event).\nsent and received edges each make up 18% of the total. These are especially important for identifying the flow of communication — i.e., who is sending and who is receiving messages — which will directly support Q2a (interactions) and Q3a (pseudonym tracking).\nA large number of edge types are marked as NA, which may indicate either missing labels or simple links between nodes (such as connecting a person to a vessel) that don’t fall under a specific relationship category.\n\nThis insight confirms that sent and received edges are essential for reconstructing directed communication paths, while evidence_for edges can later help establish which events support known relationships — a detail that may be helpful in identifying aliases."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-cleaning-and-wrangling",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-cleaning-and-wrangling",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "4.5 Data Cleaning and Wrangling",
    "text": "4.5 Data Cleaning and Wrangling\nTo analyze interaction & relationships, recognize groups, and identify pseudonym usage, we perform a series of data cleaning and wrangling steps. These steps will allow us to isolate communication events, trace sender–receiver interactions, and prepare a clean dataset for visual exploration.\nThe main data preparation steps include:\n\nExtracting communication events with timestamps\nCleaning and formatting timestamp data\nIdentifying sender and receiver relationships\nJoining sender-receiver pairs to their respective names\nMerging all relevant fields into a single tidy dataframe for analysis\nSaving the cleaned dataset for reuse in subsequent sections\n\n\n4.5.1 Extracting Communication Events With Timestamps\nThe first step filters out all non-communication events. We focus only on nodes of type == \"Event\" and sub_type == \"Communication\", as these contain the actual messages exchanged between people and vessels.\n\ncomm_events &lt;- nodes_tbl %&gt;%\n  filter(type == \"Event\", sub_type == \"Communication\")\n\nhead(comm_events)\n\n# A tibble: 6 × 31\n  type  label    name  sub_type id    timestamp monitoring_type findings content\n  &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;  \n1 Event Communi… &lt;NA&gt;  Communi… Even… 2040-10-… &lt;NA&gt;            &lt;NA&gt;     Hey Th…\n2 Event Communi… &lt;NA&gt;  Communi… Even… 2040-10-… &lt;NA&gt;            &lt;NA&gt;     Hey Th…\n3 Event Communi… &lt;NA&gt;  Communi… Even… 2040-10-… &lt;NA&gt;            &lt;NA&gt;     Sam, i…\n4 Event Communi… &lt;NA&gt;  Communi… Even… 2040-10-… &lt;NA&gt;            &lt;NA&gt;     Mrs. M…\n5 Event Communi… &lt;NA&gt;  Communi… Even… 2040-10-… &lt;NA&gt;            &lt;NA&gt;     Boss, …\n6 Event Communi… &lt;NA&gt;  Communi… Even… 2040-10-… &lt;NA&gt;            &lt;NA&gt;     Mrs. M…\n# ℹ 22 more variables: assessment_type &lt;chr&gt;, results &lt;chr&gt;,\n#   movement_type &lt;chr&gt;, destination &lt;chr&gt;, enforcement_type &lt;chr&gt;,\n#   outcome &lt;chr&gt;, activity_type &lt;chr&gt;, participants &lt;int&gt;,\n#   thing_collected &lt;df[,2]&gt;, reference &lt;chr&gt;, date &lt;chr&gt;, time &lt;chr&gt;,\n#   friendship_type &lt;chr&gt;, permission_type &lt;chr&gt;, start_date &lt;chr&gt;,\n#   end_date &lt;chr&gt;, report_type &lt;chr&gt;, submission_date &lt;chr&gt;,\n#   jurisdiction_type &lt;chr&gt;, authority_level &lt;chr&gt;, coordination_type &lt;chr&gt;, …\n\n\nThis gives us a subset of nodes that represent intercepted communications. These records include message content, associated timestamps, and unique IDs that can be matched to senders, receivers, and evidence links.\n\n\n4.5.2 Extract Necessary Fields\nTo prepare for linking communication events with sender and receiver nodes, we extract only the essential attributes:\n\nid: unique identifier of each communication event node\ntimestamp: the time the message was recorded\ncontent: the message text, which may contain names, pseudonyms, or references to vessels\n\n\ncomm_events &lt;- comm_events %&gt;%\n  select(id, timestamp = timestamp, content = content)\n\nhead(comm_events)\n\n# A tibble: 6 × 3\n  id                    timestamp           content                             \n  &lt;chr&gt;                 &lt;chr&gt;               &lt;chr&gt;                               \n1 Event_Communication_1 2040-10-01 08:09:00 Hey The Intern, it's The Lookout! J…\n2 Event_Communication_2 2040-10-01 08:10:00 Hey The Lookout, The Intern here! I…\n3 Event_Communication_3 2040-10-01 08:13:00 Sam, it's Kelly! Let's meet at Sunr…\n4 Event_Communication_5 2040-10-01 08:16:00 Mrs. Money, it's The Intern. Just c…\n5 Event_Communication_6 2040-10-01 08:19:00 Boss, it's Mrs. Money. I've reviewe…\n6 Event_Communication_7 2040-10-01 08:21:00 Mrs. Money, this is Boss. I'm avail…\n\n\nThis step gives us a concise working table with only the fields required for further merging and text analysis. The content column will be particularly important for detecting pseudonyms and identifying entities mentioned in the communication — both of which are key to answering Q2b and Q3a.\nIn the next step, we’ll clean and standardize the timestamp to support time-based grouping and visualizations.\n\n\n4.5.3 Convert Timestamp from Character to Datetime Format\nThe timestamp field was originally stored as a character string. To enable time-based filtering, aggregation, and visualizations, we convert it to proper datetime format using ymd_hms() from the lubridate package.\n\ncomm_events &lt;- comm_events %&gt;%\n  mutate(timestamp = ymd_hms(timestamp))\n\nhead(comm_events)\n\n# A tibble: 6 × 3\n  id                    timestamp           content                             \n  &lt;chr&gt;                 &lt;dttm&gt;              &lt;chr&gt;                               \n1 Event_Communication_1 2040-10-01 08:09:00 Hey The Intern, it's The Lookout! J…\n2 Event_Communication_2 2040-10-01 08:10:00 Hey The Lookout, The Intern here! I…\n3 Event_Communication_3 2040-10-01 08:13:00 Sam, it's Kelly! Let's meet at Sunr…\n4 Event_Communication_5 2040-10-01 08:16:00 Mrs. Money, it's The Intern. Just c…\n5 Event_Communication_6 2040-10-01 08:19:00 Boss, it's Mrs. Money. I've reviewe…\n6 Event_Communication_7 2040-10-01 08:21:00 Mrs. Money, this is Boss. I'm avail…\n\n\nThis transformation ensures that the timestamp column is now recognized as a POSIXct object (), allowing us to later group communications by hour, day, or time interval.\nNext, we’ll move on to identifying sender and receiver connections by working with the edges_tbl.\n\n\n4.5.4 Filter Edges for Sender and Receiver\nTo identify who is sending and receiving each message, we filter the edges_tbl to retain only edges of type “sent” or “received”. These indicate a directional connection between an entity (usually a person) and a communication event.\n\ncomm_edges &lt;- edges_tbl %&gt;%\n  filter(type %in% c(\"sent\", \"received\")) %&gt;%\n  select(source, target, type)\n\nhead(comm_edges)\n\n# A tibble: 6 × 3\n  source      target                  type \n  &lt;chr&gt;       &lt;chr&gt;                   &lt;chr&gt;\n1 Sam         Event_Communication_370 sent \n2 Kelly       Event_Communication_3   sent \n3 Kelly       Event_Communication_443 sent \n4 Nadia Conti Event_Communication_331 sent \n5 Nadia Conti Event_Communication_334 sent \n6 Nadia Conti Event_Communication_529 sent \n\n\nIn this structure:\n\nThe source column contains the person or entity initiating the edge\nThe target column refers to the communication event\nThe type column tells us whether this is a sent or received connection\n\nThis step is crucial for establishing sender–receiver pairs in later stages. By reshaping and joining this filtered edge list, we’ll be able to reconstruct the full communication path between individuals — a core component of answering Q2a (interaction mapping) and Q3a (alias tracking).\nNext, we’ll reshape this into a wide format with both sender and receiver in the same row.\n\n\n4.5.5 Separate and Rename\nNext, we break down the filtered comm_edges into two separate tables: one for senders and one for receivers. This step allows us to later combine both perspectives of each communication into a single row.\n\nsenders &lt;- comm_edges %&gt;%\n  filter(type == \"sent\") %&gt;%\n  rename(sender = source, message_id = target)\n\nreceivers &lt;- comm_edges %&gt;%\n  filter(type == \"received\") %&gt;%\n  rename(receiver = target, message_id = source)\n\n\nIn the senders table, we treat the source as the person sending the message and the target as the message node (message_id)\nIn the receivers table, we flip that: the target is the receiver and the source is the message_id\n\nBy renaming columns consistently, we can later join both tables using the shared message_id, giving us a clean structure of:\nmessage_id | sender | receiver\nThis format is key to visualizing direct interactions between individuals and spotting recurring patterns in communication and alias usage.\n\n\n4.5.6 Join Sender and Receiver Info\nNow that we have isolated senders and receivers, we join the two datasets using message_id to form a complete sender–receiver pair for each communication event.\n\ncomm_pairs &lt;- inner_join(senders, receivers, by = \"message_id\")\nhead(comm_pairs)\n\n# A tibble: 6 × 5\n  sender      message_id              type.x receiver             type.y  \n  &lt;chr&gt;       &lt;chr&gt;                   &lt;chr&gt;  &lt;chr&gt;                &lt;chr&gt;   \n1 Sam         Event_Communication_370 sent   Kelly                received\n2 Kelly       Event_Communication_3   sent   Sam                  received\n3 Kelly       Event_Communication_443 sent   Sam                  received\n4 Nadia Conti Event_Communication_331 sent   Haacklee Harbor      received\n5 Nadia Conti Event_Communication_334 sent   Oceanus City Council received\n6 Nadia Conti Event_Communication_529 sent   Liam Thorne          received\n\n\nThe resulting dataframe gives us one row per message, including:\n\nsender and receiver names\nThe corresponding message_id\nEdge types (sent, received) — useful for validating directionality if needed\n\nThis structure is foundational for building a person-to-person interaction network, detecting frequent communication pairs, and identifying clusters of closely associated individuals (Q2b). It also enables us to trace who may be using pseudonyms across multiple interactions (Q3a).\nIn the next step, we’ll enrich this structure by joining with the actual communication content and timestamps.\n\n\n4.5.7 Combine with Communication Details\nTo complete the communication record, we join the sender–receiver pairs with the original message content and timestamps. This creates a single tidy dataset that combines who spoke to whom, when, and what was said.\n\ncomm_full &lt;- comm_pairs %&gt;%\n  left_join(comm_events, by = c(\"message_id\" = \"id\"))\n\nhead(comm_full)\n\n# A tibble: 6 × 7\n  sender      message_id      type.x receiver type.y timestamp           content\n  &lt;chr&gt;       &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;  &lt;dttm&gt;              &lt;chr&gt;  \n1 Sam         Event_Communic… sent   Kelly    recei… 2040-10-05 10:48:00 Hey Ke…\n2 Kelly       Event_Communic… sent   Sam      recei… 2040-10-01 08:13:00 Sam, i…\n3 Kelly       Event_Communic… sent   Sam      recei… 2040-10-07 08:11:00 Hey Sa…\n4 Nadia Conti Event_Communic… sent   Haackle… recei… 2040-10-05 09:45:00 Haackl…\n5 Nadia Conti Event_Communic… sent   Oceanus… recei… 2040-10-05 09:49:00 This i…\n6 Nadia Conti Event_Communic… sent   Liam Th… recei… 2040-10-08 08:18:00 Liam, …\n\n\nThis final joined table includes:\n\nsender and receiver\ntimestamp (as POSIXct datetime)\ncontent of the intercepted message\ncommunication direction (sent and received tags)\n\nWith this full view, we are now equipped to:\n\nDetect frequently interacting individuals or vessels (Q2a)\nIdentify closely connected groups (Q2b)\nTrace pseudonym usage within message content (Q3a)\n\nIn the next step, we’ll optionally clean up column names and remove any unnecessary fields before saving the output for visual analytics.\n\n\n4.5.8 Join Entity Labels for Sender and Receiver\nTo ensure consistency in naming across our dataset, we extract official labels for all entities. This is particularly useful for handling pseudonyms and identifying duplicate or ambiguous names in later analysis.\n\nentity_labels &lt;- nodes_tbl %&gt;%\n  filter(type == \"Entity\") %&gt;%\n  select(id, label, sub_type)\n\nhead(entity_labels)\n\n# A tibble: 6 × 3\n  id             label          sub_type\n  &lt;chr&gt;          &lt;chr&gt;          &lt;chr&gt;   \n1 Sam            Sam            Person  \n2 Kelly          Kelly          Person  \n3 Nadia Conti    Nadia Conti    Person  \n4 Elise          Elise          Person  \n5 Liam Thorne    Liam Thorne    Person  \n6 Samantha Blake Samantha Blake Person  \n\n\nThis lookup table contains:\n\nid: unique identifier for each person or vessel\nlabel: display name (e.g., “Kelly”, “Samantha Blake”)\nsub_type: further categorizes the entity (e.g., Person, Vessel)\n\nWe will use this to join readable labels to both senders and receivers in our full dataset. This step is essential for:\n\nClarifying who the sender/receiver really is (especially if id is used inconsistently)\nTracking pseudonym usage and overlaps (Q3a)\nBuilding clean visualizations of communication networks (Q2a–b)\n\n\n\n4.5.9 Combine Everything and Save to CSV\nTo finalize the dataset, we enrich the full communication table by joining sender and receiver labels (and types) from the entity_labels lookup. This gives us a human-readable structure, ready for downstream analysis and visualization.\n\ncomm_full &lt;- comm_full %&gt;%\n  left_join(entity_labels, by = c(\"sender\" = \"id\")) %&gt;%\n  rename(sender_label = label, sender_type = sub_type) %&gt;%\n  left_join(entity_labels, by = c(\"receiver\" = \"id\")) %&gt;%\n  rename(receiver_label = label, receiver_type = sub_type)\n\nhead(comm_full)\n\n# A tibble: 6 × 11\n  sender      message_id      type.x receiver type.y timestamp           content\n  &lt;chr&gt;       &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;  &lt;dttm&gt;              &lt;chr&gt;  \n1 Sam         Event_Communic… sent   Kelly    recei… 2040-10-05 10:48:00 Hey Ke…\n2 Kelly       Event_Communic… sent   Sam      recei… 2040-10-01 08:13:00 Sam, i…\n3 Kelly       Event_Communic… sent   Sam      recei… 2040-10-07 08:11:00 Hey Sa…\n4 Nadia Conti Event_Communic… sent   Haackle… recei… 2040-10-05 09:45:00 Haackl…\n5 Nadia Conti Event_Communic… sent   Oceanus… recei… 2040-10-05 09:49:00 This i…\n6 Nadia Conti Event_Communic… sent   Liam Th… recei… 2040-10-08 08:18:00 Liam, …\n# ℹ 4 more variables: sender_label &lt;chr&gt;, sender_type &lt;chr&gt;,\n#   receiver_label &lt;chr&gt;, receiver_type &lt;chr&gt;\n\n\nThis results in a clean, consolidated dataset containing:\n\nSender and receiver IDs\nTheir full labels (e.g., “Nadia Conti”)\nTheir types (e.g., Person, Organization)\nTimestamp and message content\n\nFinally, we export the processed dataset to CSV format so it can be reused by the whole team for answering specific questions (Q1, Q2, Q3, Q4).\n\nwrite_csv(comm_full, \"data/communications_full.csv\")\n\nThis communications_full.csv will be the basis for identifying social clusters, alias patterns, and communication dynamics across Oceanus."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#communication-network-who-talks-to-whom",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#communication-network-who-talks-to-whom",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "5.1 Communication Network: Who Talks to Whom?",
    "text": "5.1 Communication Network: Who Talks to Whom?\nTo begin answering Question 2a, we construct a directed network graph showing who communicates with whom based on the intercepted radio messages.\nWe use the cleaned comm_full dataset and aggregate all communications into a sender–receiver edge list. Each edge represents at least one message sent from one entity to another. The resulting network allows us to examine the structure and density of interpersonal or inter-organizational interactions.\n\n5.1.1 Preparation\n\nedge_list &lt;- comm_full %&gt;%\n  select(sender_label, receiver_label) %&gt;%\n  filter(!is.na(sender_label) & !is.na(receiver_label)) %&gt;%\n  count(sender_label, receiver_label, name = \"weight\")\n\nlibrary(igraph)\ngraph_comm &lt;- graph_from_data_frame(edge_list, directed = TRUE)\n\n\n\n5.1.2 Visualization\nThe following network graph addresses Question 2a by revealing the structure of interactions between key entities, highlighting frequent communicators and directional patterns of message flow.\n\nlibrary(igraph)\nlibrary(visNetwork)\nlibrary(dplyr)\n\n# Step 1: Create igraph\ngraph_comm &lt;- graph_from_data_frame(edge_list, directed = TRUE)\n\n# Step 2: Louvain Clustering\nclusters &lt;- cluster_walktrap(graph_comm)\n\n# Custom cluster names\ncluster_map &lt;- c(\n  \"1\" = \"Sailor Shift Bloc\",\n  \"2\" = \"Environmentalists\",\n  \"3\" = \"Central Operations\",\n  \"4\" = \"Accountant Group\",\n  \"5\" = \"Isolated Individuals\"\n)\n\nmembership_named &lt;- cluster_map[as.character(clusters$membership)]\n\n# Step 3: Node info\ndeg_sent &lt;- degree(graph_comm, mode = \"out\")\ndeg_recv &lt;- degree(graph_comm, mode = \"in\")\n\nnodes &lt;- data.frame(\n  id = V(graph_comm)$name,\n  label = V(graph_comm)$name,\n  title = paste0(\"📤 Sent: \", deg_sent, \"&lt;br&gt;📥 Received: \", deg_recv),\n  group = membership_named,\n  value = deg_sent + deg_recv\n)\n\n# Step 4: Edge info\nedges &lt;- data.frame(\n  from = as_edgelist(graph_comm)[, 1],\n  to = as_edgelist(graph_comm)[, 2],\n  arrows = \"to\"\n)\n\n# Step 5: Interactive Graph\nvisNetwork(nodes, edges) %&gt;%\n  visOptions(\n    highlightNearest = TRUE,\n    nodesIdSelection = list(enabled = TRUE)\n  ) %&gt;%\n  visLegend() %&gt;%\n  visPhysics(solver = \"forceAtlas2Based\") %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n5.1.3 Observation\n• The network shows several central nodes such as Nadia Conti, Kelly, and The Lookout, which are involved in multiple communication threads.\n• Some individuals (e.g., Sam, The Intern) act as frequent intermediaries, suggesting possible operational or relay roles.\n• The edges are directional, revealing asymmetries in interaction — some entities mostly receive messages (e.g., Oceanus City Council), while others primarily send.\n\n\n5.1.4 Insights\n• The structure of the communication network is non-random, with a few dominant communicators and several peripheral participants.\n• This suggests an underlying hierarchy or coordination, potentially reflecting real-world group leadership and operational dynamics.\n• The directional patterns will also assist in identifying influencers or information flow sources, which can be further explored in later clustering (Q2b) and alias tracing (Q3)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#group-detection-who-belongs-together",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#group-detection-who-belongs-together",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "5.2 Group Detection: Who Belongs Together?",
    "text": "5.2 Group Detection: Who Belongs Together?\nTo answer Question 2b, we applied the Louvain community detection algorithm on the undirected version of the communication graph. The result reveals several densely connected subgroups — each colored uniquely in the network diagram below.\n\n5.2.1 Preparation\n\n# Convert to undirected for Louvain clustering\ngraph_comm_undirected &lt;- as.undirected(graph_comm, mode = \"collapse\")\n\n# Detect communities\ncommunities &lt;- cluster_louvain(graph_comm_undirected)\n\n# Add cluster membership to each node\nV(graph_comm_undirected)$group &lt;- communities$membership\n\n\n\n5.2.2 Visualisaytion\n\nggraph(graph_comm_undirected, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, color = \"grey70\") +\n  geom_node_point(aes(color = as.factor(group)), size = 5) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  theme_void() +\n  labs(title = \"Detected Communication Clusters\",\n       color = \"Cluster\")\n\n\n\n\n\n\n\n\n\n\n5.2.3 Observation\nThe community detection algorithm identifies four distinct groups, helping to uncover potential operational, political, or environmental affiliations.\n• Entities naturally group into distinct clusters based on communication patterns.\n• Some groups are tightly internal (communicate mostly within their own), while others have bridges to other clusters. For instance:\n\nOne cluster includes Green Guardians, EcoVigil, and Reef Guardian, suggesting an environmentalist bloc.\nAnother cluster revolves around Sailor Shifts Team, The Accountant, and Boss, potentially aligned with Sailor Shift’s crew or influential organizers.\nA third cluster connects Oceanus City Council, Port Security, and Haacklee Harbor, pointing to government or enforcement groups.\n\n\n\n5.2.4 Insights\n• The communication network is not random — rather, it reflects latent functional or operational alliances.\n• Grouping by communication reveals informal organizational structures.\n• These findings help Clepper focus on group motives, loyalties, and possibly shared agendas."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#pseudonym-detection-and-alias-use",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#pseudonym-detection-and-alias-use",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "5.3 Pseudonym Detection and Alias Use",
    "text": "5.3 Pseudonym Detection and Alias Use\nTo answer Question 3a, we analyzed the content of communications to identify mentions of known pseudonyms, including “Boss,” “The Lookout,” and “The Intern.” These names do not appear as formal entity labels in the node data, suggesting they are aliases used informally during communication.\n\n5.3.1 Preparation\n\n# Keywords already suspected\nsuspect_names &lt;- c(\"Boss\", \"The Lookout\", \"The Intern\")\n\n# Who mentions whom in content\npseudonym_mentions &lt;- comm_full %&gt;%\n  filter(str_detect(content, str_c(suspect_names, collapse = \"|\"))) %&gt;%\n  select(timestamp, sender_label, receiver_label, content)\n\n\n\n5.3.2 Visualisation\n\nlibrary(tidytext)\n\n# Tokenize and count pseudonyms mentioned\npseudo_mentions &lt;- comm_full %&gt;%\n  unnest_tokens(word, content) %&gt;%\n  filter(word %in% c(\"boss\", \"lookout\", \"intern\")) %&gt;%\n  count(sender_label, word, sort = TRUE)\n\n# Visualise\nggplot(pseudo_mentions, aes(x = reorder(sender_label, -n), y = n, fill = word)) +\n  geom_col(position = \"dodge\") +\n  coord_flip() +\n  labs(title = \"Who Mentions Which Pseudonyms?\",\n       x = \"Sender\", y = \"Mentions\",\n       fill = \"Pseudonym\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n5.3.3 Observation\n• Boss is mentioned frequently by Mrs. Money, Samantha Blake, and The Middleman — suggesting operational hierarchy.\n• The Lookout is referenced both by and about Sam, The Intern, and Kelly.\n• The Intern appears across multiple conversations and is sometimes both sender and subject — possibly used by more than one person.\n\n\n5.3.4 Insights\n• The overlap in usage patterns suggests pseudonyms may not belong to unique individuals — instead, they may represent roles or shared identities.\n• Visualization helped narrow down likely real-world entities using each alias by tracking sender-pseudonym co-occurrence.\n• This is useful for Clepper in cross-referencing roles vs names in the network — especially when aliases are used strategically to obfuscate."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visual-aids-for-pseudonym-investigation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visual-aids-for-pseudonym-investigation",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "5.4 Visual Aids for Pseudonym Investigation",
    "text": "5.4 Visual Aids for Pseudonym Investigation\nThe visualisation of pseudonym mentions (see bar chart above) plays a crucial role in helping Clepper identify who is most likely using or referring to each alias.\n\n5.4.1 Observation\n• The bar chart clearly shows which entities consistently reference “Boss,” “The Intern,” and “The Lookout.”\n• Overlapping usage — especially when the sender and the mentioned alias are the same — suggests self-reference or possible impersonation.\n• Central figures like The Intern and The Lookout frequently mention each other and themselves, raising flags about possible shared or rotating identities.\n\n\n5.4.2 Insights\n• Without visual analytics, it would be difficult to track alias usage across hundreds of messages.\n• The visualisation:\n\nCondenses complex text patterns into actionable summaries.\nReveals core communicators behind aliases.\nHighlights potential identity obfuscation or alias sharing, which may be deliberate.\n\nUltimately, the chart equips Clepper to move beyond raw transcripts — empowering him to focus on alias resolution and influence tracing with far greater clarity and confidence."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-2a-2b",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-2a-2b",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "5.1 Question 2a & 2b",
    "text": "5.1 Question 2a & 2b\nTo answer these two questions, we construct a interactive network graph showing who communicates with whom based on the intercepted radio messages.\nWe use the cleaned comm_full dataset and aggregate all communications into a sender–receiver edge list. Each edge represents at least one message sent from one entity to another. The resulting network allows us to examine the structure and density of interpersonal or inter-organizational interactions.\n\n5.1.1 Preparation\n\nedge_list &lt;- comm_full %&gt;%\n  select(sender_label, receiver_label) %&gt;%\n  filter(!is.na(sender_label) & !is.na(receiver_label)) %&gt;%\n  count(sender_label, receiver_label, name = \"weight\")\n\nlibrary(igraph)\ngraph_comm &lt;- graph_from_data_frame(edge_list, directed = TRUE)\n\n\n\n5.1.2 Visualization\nThis interactive network graph addresses Questions 2a and 2b by uncovering key communication dynamics and community structures within the intercepted message data.\n• Node Labels: Each node is labeled directly on the graph with its name (or pseudonym), allowing for easy identification.\n• Edge Direction: Arrows indicate message flow, showing who sent a message to whom.\n• Node Size: Proportional to the number of messages handled (sent + received). Larger nodes are high-volume communicators and possible influencers or intermediaries.\n• Tooltip Details: Hovering over a node reveals the number of messages sent & received of that node.\n• Node Color & Group Labels: Each node represents an individual or entity, and is colored based on its communication cluster, which is automatically detected using the Louvain community detection algorithm. A cluster refers to a group of nodes that communicate more frequently with each other than with nodes outside their group. These groups might reflect underlying real-world affiliations or coordinated behavior:\n\n🔵 Central Operations (e.g., The Intern, The Lookout, Oceanus City Council)\n🟡 Isolated Individuals (e.g., Clepper Jensen, Miranda Jordan)\n🔴 Sailor Shift Bloc (e.g., Boss, Sailor Shifts Team, Samantha Blake)\n🟢 Environmentalists (e.g., Green Guardians, EcoVigil, Reef Guardian)\n🟣 Accountant Group (e.g., The Accountant, The Middleman)\n\n• Filter: Use the “Select by id” dropdown at the top to highlight an individual node along with all entities it communicates with directly.\n• Interactivity: It is possible to zoom in and out the graph to explore dense areas more easily.\n\nlibrary(igraph)\nlibrary(visNetwork)\nlibrary(dplyr)\n\n# Step 1: Create igraph\ngraph_comm &lt;- graph_from_data_frame(edge_list, directed = TRUE)\n\n# Step 2: Louvain Clustering\nclusters &lt;- cluster_walktrap(graph_comm)\n\n# Custom cluster names\ncluster_map &lt;- c(\n  \"1\" = \"Sailor Shift Bloc\",\n  \"2\" = \"Environmentalists\",\n  \"3\" = \"Central Operations\",\n  \"4\" = \"Accountant Group\",\n  \"5\" = \"Isolated Individuals\"\n)\n\nmembership_named &lt;- cluster_map[as.character(clusters$membership)]\n\n# Step 3: Node info\ndeg_sent &lt;- degree(graph_comm, mode = \"out\")\ndeg_recv &lt;- degree(graph_comm, mode = \"in\")\n\nnodes &lt;- data.frame(\n  id = V(graph_comm)$name,\n  label = V(graph_comm)$name,\n  title = paste0(\"📤 Sent: \", deg_sent, \"&lt;br&gt;📥 Received: \", deg_recv),\n  group = membership_named,\n  value = deg_sent + deg_recv\n)\n\n# Step 4: Edge info\nedges &lt;- data.frame(\n  from = as_edgelist(graph_comm)[, 1],\n  to = as_edgelist(graph_comm)[, 2],\n  arrows = \"to\"\n)\n\n# Step 5: Interactive Graph\nvisNetwork(nodes, edges) %&gt;%\n  visOptions(\n    highlightNearest = TRUE,\n    nodesIdSelection = list(enabled = TRUE)\n  ) %&gt;%\n  visLegend() %&gt;%\n  visPhysics(solver = \"forceAtlas2Based\") %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n5.1.3 Question 2a - Communication Network: Who Talks to Whom?\n\n5.1.3.1 Observation\n• The largest nodes by size like Mako, Oceanus City Council, and Reef Guardians represent the most active communicators, each with a high total number of messages sent and received.\n• In contrast to these dominant hubs, nodes like Port Security and City Officials participate less frequently, possibly playing supporting roles.\n• Some entities, such as Mako, primarily receive messages, while others, like The Lookout, mostly send them. However, there are also individuals that are highly active in both sending and receiving messages, such as Nadia Conti, which probably be intermediaries or coordinators among different groups.\n\n\n5.1.3.2 Insights\n• The structure of the communication network is concentrated, with a few dominant communicators and several peripheral participants.\n• This suggests an underlying hierarchy or coordination, potentially reflecting real-world group leadership and operational dynamics.\n• The directional patterns will also assist in identifying influencers or information flow sources, which can be further explored in later clustering (Q2b) and alias tracing (Q3).\n\n\n\n5.1.4 Question 2b - Group Detection: Who Belongs Together?\n\n5.1.4.1 Observation\nThe community detection algorithm identifies four distinct groups, helping to uncover potential operational, political, or environmental affiliations.\n• Entities naturally group into distinct clusters based on communication patterns.\n• Some groups are tightly internal (communicate mostly within their own), while others have bridges to other clusters. For instance:\n\nOne cluster includes Green Guardians, EcoVigil, and Reef Guardian, suggesting an environmentalist bloc.\nAnother cluster revolves around Sailor Shifts Team, The Accountant, and Boss, potentially aligned with Sailor Shift’s crew or influential organizers.\nA third cluster connects Oceanus City Council, Port Security, and Haacklee Harbor, pointing to government or enforcement groups.\n\n\n\n5.1.4.2 Insights\n• The communication network is not random — rather, it reflects latent functional or operational alliances.\n• Grouping by communication reveals informal organizational structures.\n• These findings help Clepper focus on group motives, loyalties, and possibly shared agendas."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#questions-2a-2b",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#questions-2a-2b",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "5.1 Questions 2a & 2b",
    "text": "5.1 Questions 2a & 2b\nTo answer these two questions, we construct a interactive network graph showing who communicates with whom based on the intercepted radio messages.\nWe use the cleaned comm_full dataset and aggregate all communications into a sender–receiver edge list. Each edge represents at least one message sent from one entity to another. The resulting network allows us to examine the structure and density of interpersonal or inter-organizational interactions.\n\n5.1.1 Preparation\n\nedge_list &lt;- comm_full %&gt;%\n  select(sender_label, receiver_label) %&gt;%\n  filter(!is.na(sender_label) & !is.na(receiver_label)) %&gt;%\n  count(sender_label, receiver_label, name = \"weight\")\n\nlibrary(igraph)\ngraph_comm &lt;- graph_from_data_frame(edge_list, directed = TRUE)\n\n\n\n5.1.2 Visualization\nThis interactive network graph addresses Questions 2a and 2b by uncovering key communication dynamics and community structures within the intercepted message data.\n• Node Labels: Each node is labeled directly on the graph with its name (or pseudonym), allowing for easy identification.\n• Edge Direction: Arrows indicate message flow, showing who sent a message to whom.\n• Node Size: Proportional to the number of messages handled (sent + received). Larger nodes are high-volume communicators and possible influencers or intermediaries.\n• Tooltip Details: Hovering over a node reveals the number of messages sent & received of that node.\n• Node Color & Group Labels: Each node represents an individual or entity, and is colored based on its communication cluster, which is automatically detected using the Louvain community detection algorithm. A cluster refers to a group of nodes that communicate more frequently with each other than with nodes outside their group, which might reflect underlying real-world affiliations or coordinated behavior. From the communication network, five distinct clusters are identified.\n• Filter: Use the “Select by id” dropdown at the top to highlight an individual node along with all entities it communicates with directly.\n• Interactivity: It is possible to zoom in and out the graph to explore dense areas more easily.\n\nlibrary(igraph)\nlibrary(visNetwork)\nlibrary(dplyr)\n\n# Step 1: Create igraph object\ngraph_comm &lt;- graph_from_data_frame(edge_list, directed = TRUE)\n\n# Step 2: Louvain Clustering\nclusters &lt;- cluster_walktrap(graph_comm)\n\n# Step 3: Define cluster labels (Cluster 1 to 5)\ncluster_map &lt;- c(\n  \"1\" = \"Cluster 1\",\n  \"2\" = \"Cluster 2\",\n  \"3\" = \"Cluster 3\",\n  \"4\" = \"Cluster 4\",\n  \"5\" = \"Cluster 5\"\n)\n\n# Step 4: Compute node-level info\ndeg_sent &lt;- degree(graph_comm, mode = \"out\")\ndeg_recv &lt;- degree(graph_comm, mode = \"in\")\n\nnodes &lt;- data.frame(\n  id = V(graph_comm)$name,\n  label = V(graph_comm)$name,\n  title = paste0(\"📤 Sent: \", deg_sent, \"&lt;br&gt;📥 Received: \", deg_recv),\n  group = cluster_map[as.character(clusters$membership)],\n  value = deg_sent + deg_recv\n)\n\n# Step 5: Factor group for legend order (Cluster 1 → Cluster 5)\nnodes$group &lt;- factor(nodes$group, levels = paste0(\"Cluster \", 1:5))\n\n# Step 6: Prepare edges\nedges &lt;- data.frame(\n  from = as_edgelist(graph_comm)[, 1],\n  to = as_edgelist(graph_comm)[, 2],\n  arrows = \"to\"\n)\n\n# Step 7: Render interactive graph\nvisNetwork(nodes, edges) %&gt;%\n  visOptions(\n    highlightNearest = TRUE,\n    nodesIdSelection = list(enabled = TRUE)\n  ) %&gt;%\n  visLegend() %&gt;%\n  visPhysics(solver = \"forceAtlas2Based\") %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n5.1.3 Question 2a - Communication Network: Who Talks to Whom?\n• The largest nodes by size like Mako, Oceanus City Council, and Reef Guardians represent the most active communicators, each with a high total number of messages sent and received. In contrast to these dominant hubs, nodes like Port Security and City Officials participate less frequently, possibly playing supporting roles.\n=&gt; The structure of the communication network is concentrated, with a few dominant communicators and several peripheral participants.This suggests an underlying hierarchy or coordination, potentially reflecting real-world group leadership and operational dynamics.\n• Some entities, such as Mako, primarily receive messages, while others, like The Lookout, mostly send them. However, there are also individuals that are highly active in both sending and receiving messages, such as Nadia Conti, which probably be intermediaries or coordinators among different groups.\n=&gt; The directional patterns assist in identifying influencers or information flow sources, which can be further explored in later clustering (Q2b) and alias tracing (Q3).\n\n\n5.1.4 Question 2b - Group Detection: Who Belongs Together?\nThe communication network reveals five distinct clusters, each representing a group of entities that communicate more frequently within their group/cluster than with outside entities, suggesting likely shared objectives or roles. The clusters were derived using the Louvain algorithm, which detects tightly connected groups within the network. Each cluster is color-coded for visual clarity.\n🔴 Cluster 1 consists of 16 nodes: City Officials, Neptune, Small Fry, Davis, Remora, Mako, V. Miesel Shipping, Rodriguez, Nadia Conti, Elise, Sailor Shifts Team, Knowles, Glitters Team, Osprey, Smantha Blake, and Haacklee Harbor.\n🟢 Cluster 2 consist of 15 nodes: Port Security, Defender, Serenity, Reef Guardian, Seawatch, Horizon, Sentinel, Green Guardians, Himark Harbor, Marlin, Paackland Harbor, Northern Light, Oceanus City Council, EcoVigil, and Liam Thorne.\n🔵 Cluster 3 consists of 6 nodes: The Lookout, The Intern, Mrs. Money, Boss, The Middleman, and The Accountant.\n🟣 Cluster 4 consists of 2 nodes: Sam and Kelly. These two entities barely communicate and, if they do, primarily interact with each other, as their only outside communication is with Cluster 3.\n🟡 Cluster 5 consists of 2 nodes: Miranda Jordan and Clepper Jensen. These two entities barely communicate too and, if they do, only interact with each other. This makes their cluster completely isolated from the broader network, which indicates potential secrecy, independence, or exclusion from main operational flows.\nAs we can see, the network structure is well-organized: most entities belong to well-defined clusters with strong internal communication ties.\nSo what is the dominant focus or topic of communication within each cluster? To explore this, the content of all messages sent or received by members of each group is analyzed. By extracting the top 20 most frequently used keywords per cluster, recurring themes can be identified to better understand the likely roles, concerns, or affiliations of each group within the broader network.\n\nCode🔴 Cluster 1🟢 Cluster 2🔵 Cluster 3🟣 Cluster 4🟡 Cluster 5\n\n\n\n# Load required libraries\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(tidytext)\nlibrary(stringr)\nlibrary(igraph)\n\n# Step 1: Extract node-cluster membership from graph\nnode_cluster &lt;- data.frame(\n  label = V(graph_comm)$name,\n  cluster = clusters$membership\n)\n\n# Step 2: Join cluster membership to sender and receiver in comm_full\ncomm_with_cluster &lt;- comm_full %&gt;%\n  left_join(node_cluster, by = c(\"sender_label\" = \"label\")) %&gt;%\n  rename(sender_cluster = cluster) %&gt;%\n  left_join(node_cluster, by = c(\"receiver_label\" = \"label\")) %&gt;%\n  rename(receiver_cluster = cluster)\n\n# Step 3: Convert to long format — one row per message-cluster pair\ncomm_long &lt;- comm_with_cluster %&gt;%\n  select(content, sender_cluster, receiver_cluster) %&gt;%\n  rename(message_content = content) %&gt;%\n  pivot_longer(cols = c(sender_cluster, receiver_cluster),\n               names_to = \"role\", values_to = \"cluster\") %&gt;%\n  filter(!is.na(cluster), !is.na(message_content))\n\n# Step 4: Tokenize text and remove stop words\ndata(\"stop_words\")  # Load tidytext stop word list\n\ntokens_by_cluster &lt;- comm_long %&gt;%\n  unnest_tokens(word, message_content) %&gt;%\n  filter(!word %in% stop_words$word, str_detect(word, \"[a-z]\")) %&gt;%\n  count(cluster, word, sort = TRUE)\n\n# Step 5: Get top 10 keywords per cluster\ntop_keywords &lt;- tokens_by_cluster %&gt;%\n  group_by(cluster) %&gt;%\n  slice_max(n, n = 20, with_ties = FALSE) %&gt;%\n  arrange(cluster, desc(n)) %&gt;%\n  ungroup()\n\n# Step 6: Split into list of data frames by cluster\nkeyword_lists &lt;- top_keywords %&gt;%\n  group_by(cluster) %&gt;%\n  group_split()\n\n# (Optional) Name each list element\nnames(keyword_lists) &lt;- paste0(\"Cluster_\", sort(unique(top_keywords$cluster)))\n\n\n\n\n\n# A tibble: 20 × 3\n   cluster word              n\n     &lt;dbl&gt; &lt;chr&gt;         &lt;int&gt;\n 1       1 mako            210\n 2       1 reef            177\n 3       1 nemo            159\n 4       1 equipment       151\n 5       1 remora          142\n 6       1 neptune         128\n 7       1 harbor          119\n 8       1 davis            99\n 9       1 team             98\n10       1 tomorrow         94\n11       1 miesel           80\n12       1 operations       78\n13       1 permit           74\n14       1 operation        69\n15       1 maintain         68\n16       1 crew             65\n17       1 nadia            65\n18       1 protocols        65\n19       1 documentation    63\n20       1 himark           63\n\n\n\n\n\n\n# A tibble: 20 × 3\n   cluster word              n\n     &lt;dbl&gt; &lt;chr&gt;         &lt;int&gt;\n 1       2 reef            427\n 2       2 nemo            310\n 3       2 harbor          201\n 4       2 council         196\n 5       2 city            159\n 6       2 vessels         156\n 7       2 oceanus         141\n 8       2 equipment       131\n 9       2 green           125\n10       2 guardian        125\n11       2 guardians       125\n12       2 sentinel        104\n13       2 environmental   100\n14       2 closure          88\n15       2 vessel           86\n16       2 horizon          85\n17       2 documentation    83\n18       2 himark           79\n19       2 paackland        77\n20       2 monitoring       73\n\n\n\n\n\n\n# A tibble: 20 × 3\n   cluster word             n\n     &lt;dbl&gt; &lt;chr&gt;        &lt;int&gt;\n 1       3 reef           128\n 2       3 nemo           120\n 3       3 money           93\n 4       3 intern          90\n 5       3 meeting         86\n 6       3 lookout         83\n 7       3 conservation    75\n 8       3 boss            61\n 9       3 tomorrow        57\n10       3 middleman       51\n11       3 vessels         44\n12       3 bring           39\n13       3 equipment       35\n14       3 birdwatching    32\n15       3 council         31\n16       3 underwater      26\n17       3 activity        25\n18       3 financial       25\n19       3 increased       25\n20       3 discuss         24\n\n\n\n\n\n\n# A tibble: 20 × 3\n   cluster word             n\n     &lt;dbl&gt; &lt;chr&gt;        &lt;int&gt;\n 1       4 birdwatching    10\n 2       4 lookout          8\n 3       4 reef             8\n 4       4 tomorrow         8\n 5       4 kelly            6\n 6       4 sam              6\n 7       4 conservation     5\n 8       4 nemo             5\n 9       4 hey              4\n10       4 perfect          4\n11       4 rare             4\n12       4 special          4\n13       4 spotted          4\n14       4 vessels          4\n15       4 bring            3\n16       4 crates           3\n17       4 equipment        3\n18       4 fragile          3\n19       4 harbor           3\n20       4 heard            3\n\n\n\n\n\n\n# A tibble: 20 × 3\n   cluster word              n\n     &lt;dbl&gt; &lt;chr&gt;         &lt;int&gt;\n 1       5 miranda          76\n 2       5 equipment        42\n 3       5 clepper          40\n 4       5 jensen           36\n 5       5 environmental    28\n 6       5 vessels          28\n 7       5 conservation     22\n 8       5 documents        20\n 9       5 rodriguez        20\n10       5 document         18\n11       5 harbor           18\n12       5 security         18\n13       5 vessel           18\n14       5 council          16\n15       5 reef             16\n16       5 nemo             14\n17       5 knowles          12\n18       5 meeting          12\n19       5 miesel           12\n20       5 officials        12\n\n\n\n\n\nThese most frequently used keywords in each cluster’s messages reveal the possible focus areas of each group:\n\nCluster 1 appears to be focused on maritime operations. Keywords like mako, reef, nemo, equipment, remora, neptune, harbor, operation, and crew suggest activity around oceanic logistics, vessels, and maintenance—likely indicating a team involved in sea-based field operations or enforcement.\nCluster 2 centers around administrative, environmental, and governance topics. Common terms such as reef, council, vessels, guardians, oceanus, and environmental suggest this group is tied to regulatory oversight, marine protection, and coastal coordination efforts.\nCluster 3 includes terms like intern, lookout, money, conservation, meeting, and birdwatching. This suggests a mix of administrative coordination, funding discussion, and environmental awareness—possibly indicating a communication hub or a coordinating body between groups.\nCluster 4 is defined by very limited communication, but its top words include birdwatching, reef, tomorrow, lookout, and conservation. This suggests a casual or observational focus, possibly recreational or loosely involved in environmental tracking.\nCluster 5 consists of only two nodes and shares no dominant thematic terms. The absence of high-frequency words or mission-critical vocabulary further supports its classification as a secluded or possibly independent cluster, with limited or non-operational messaging."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-2---communication-network-group-detection",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-2---communication-network-group-detection",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "5.1 Question 2 - Communication Network & Group Detection",
    "text": "5.1 Question 2 - Communication Network & Group Detection\nTo answer these two questions, we construct a interactive network graph showing who communicates with whom based on the intercepted radio messages.\nWe use the cleaned comm_full dataset and aggregate all communications into a sender–receiver edge list. Each edge represents at least one message sent from one entity to another. The resulting network allows us to examine the structure and density of interpersonal or inter-organizational interactions.\n\n5.1.1 Visualization\nThis interactive network graph addresses Questions 2a and 2b by uncovering key communication dynamics and community structures within the intercepted message data.\n• Node Labels: Each node is labeled directly on the graph with its name (or pseudonym), allowing for easy identification.\n• Edge Direction: Arrows indicate message flow, showing who sent a message to whom.\n• Node Size: Proportional to the number of messages handled (sent + received). Larger nodes are high-volume communicators and possible influencers or intermediaries.\n• Tooltip Details: Hovering over a node reveals the number of messages sent & received of that node.\n• Node Color & Group Labels: Each node represents an individual or entity, and is colored based on its communication cluster, which is automatically detected using the Louvain community detection algorithm. A cluster refers to a group of nodes that communicate more frequently with each other than with nodes outside their group, which might reflect underlying real-world affiliations or coordinated behavior. From the communication network, five distinct clusters are identified.\n• Filter: Use the “Select by id” dropdown at the top to highlight an individual node along with all entities it communicates with directly.\n• Interactivity: It is possible to zoom in and out the graph to explore dense areas more easily.\n\nCommunication NetworkCode\n\n\n\n\n\n\n\n\n\n\n\nlibrary(igraph)\nlibrary(visNetwork)\nlibrary(dplyr)\n\nedge_list &lt;- comm_full %&gt;%\n  select(sender_label, receiver_label) %&gt;%\n  filter(!is.na(sender_label) & !is.na(receiver_label)) %&gt;%\n  count(sender_label, receiver_label, name = \"weight\")\n\ngraph_comm &lt;- graph_from_data_frame(edge_list, directed = TRUE)\n\n# Step 1: Create igraph object\ngraph_comm &lt;- graph_from_data_frame(edge_list, directed = TRUE)\n\n# Step 2: Louvain Clustering\nclusters &lt;- cluster_walktrap(graph_comm)\n\n# Step 3: Define cluster labels (Cluster 1 to 5)\ncluster_map &lt;- c(\n  \"1\" = \"Cluster 1\",\n  \"2\" = \"Cluster 2\",\n  \"3\" = \"Cluster 3\",\n  \"4\" = \"Cluster 4\",\n  \"5\" = \"Cluster 5\"\n)\n\n# Step 4: Compute node-level info\ndeg_sent &lt;- degree(graph_comm, mode = \"out\")\ndeg_recv &lt;- degree(graph_comm, mode = \"in\")\n\nnodes &lt;- data.frame(\n  id = V(graph_comm)$name,\n  label = V(graph_comm)$name,\n  title = paste0(\"📤 Sent: \", deg_sent, \"&lt;br&gt;📥 Received: \", deg_recv),\n  group = cluster_map[as.character(clusters$membership)],\n  value = deg_sent + deg_recv\n)\n\n# Step 5: Factor group for legend order (Cluster 1 → Cluster 5)\nnodes$group &lt;- factor(nodes$group, levels = paste0(\"Cluster \", 1:5))\n\n# Step 6: Prepare edges\nedges &lt;- data.frame(\n  from = as_edgelist(graph_comm)[, 1],\n  to = as_edgelist(graph_comm)[, 2],\n  arrows = \"to\"\n)\n\n# Step 7: Render interactive graph\nvisNetwork(nodes, edges) %&gt;%\n  visOptions(\n    highlightNearest = TRUE,\n    nodesIdSelection = list(enabled = TRUE)\n  ) %&gt;%\n  visLegend() %&gt;%\n  visPhysics(solver = \"forceAtlas2Based\") %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n5.1.2 Question 2a - Communication Network: Who Talks to Whom?\n• The largest nodes by size like Mako, Oceanus City Council, and Reef Guardians represent the most active communicators, each with a high total number of messages sent and received. In contrast to these dominant hubs, nodes like Port Security and City Officials participate less frequently, possibly playing supporting roles.\n=&gt; The structure of the communication network is concentrated, with a few dominant communicators and several peripheral participants.This suggests an underlying hierarchy or coordination, potentially reflecting real-world group leadership and operational dynamics.\n• Some entities, such as Mako, primarily receive messages, while others, like The Lookout, mostly send them. However, there are also individuals that are highly active in both sending and receiving messages, such as Nadia Conti, which probably be intermediaries or coordinators among different groups.\n=&gt; The directional patterns assist in identifying influencers or information flow sources, which can be further explored in later clustering (Q2b) and alias tracing (Q3).\n\n\n5.1.3 Question 2b - Group Detection: Who Belongs Together?\nThe communication network reveals five distinct clusters, each representing a group of entities that communicate more frequently within their group/cluster than with outside entities, suggesting likely shared objectives or roles. The clusters were derived using the Louvain algorithm, which detects tightly connected groups within the network. Each cluster is color-coded for visual clarity.\n🔴 Cluster 1 consists of 16 nodes: City Officials, Neptune, Small Fry, Davis, Remora, Mako, V. Miesel Shipping, Rodriguez, Nadia Conti, Elise, Sailor Shifts Team, Knowles, Glitters Team, Osprey, Smantha Blake, and Haacklee Harbor.\n🟢 Cluster 2 consist of 15 nodes: Port Security, Defender, Serenity, Reef Guardian, Seawatch, Horizon, Sentinel, Green Guardians, Himark Harbor, Marlin, Paackland Harbor, Northern Light, Oceanus City Council, EcoVigil, and Liam Thorne.\n🔵 Cluster 3 consists of 6 nodes: The Lookout, The Intern, Mrs. Money, Boss, The Middleman, and The Accountant.\n🟣 Cluster 4 consists of 2 nodes: Sam and Kelly. These two entities barely communicate and, if they do, primarily interact with each other, as their only outside communication is with Cluster 3.\n🟡 Cluster 5 consists of 2 nodes: Miranda Jordan and Clepper Jensen. These two entities barely communicate too and, if they do, only interact with each other. This makes their cluster completely isolated from the broader network, which indicates potential secrecy, independence, or exclusion from main operational flows.\nAs we can see, the network structure is well-organized: most entities belong to well-defined clusters with strong internal communication ties.\nSo what is the dominant focus or topic of communication within each cluster? To explore this, the content of all messages sent or received by members of each group is analyzed. By extracting the top 20 most frequently used keywords per cluster, recurring themes can be identified to better understand the likely roles, concerns, or affiliations of each group within the broader network.\n\n🔴 Cluster 1🟢 Cluster 2🔵 Cluster 3🟣 Cluster 4🟡 Cluster 5Code\n\n\n\n\n# A tibble: 20 × 3\n   cluster word              n\n     &lt;dbl&gt; &lt;chr&gt;         &lt;int&gt;\n 1       1 mako            210\n 2       1 reef            177\n 3       1 nemo            159\n 4       1 equipment       151\n 5       1 remora          142\n 6       1 neptune         128\n 7       1 harbor          119\n 8       1 davis            99\n 9       1 team             98\n10       1 tomorrow         94\n11       1 miesel           80\n12       1 operations       78\n13       1 permit           74\n14       1 operation        69\n15       1 maintain         68\n16       1 crew             65\n17       1 nadia            65\n18       1 protocols        65\n19       1 documentation    63\n20       1 himark           63\n\n\n\n\n\n\n# A tibble: 20 × 3\n   cluster word              n\n     &lt;dbl&gt; &lt;chr&gt;         &lt;int&gt;\n 1       2 reef            427\n 2       2 nemo            310\n 3       2 harbor          201\n 4       2 council         196\n 5       2 city            159\n 6       2 vessels         156\n 7       2 oceanus         141\n 8       2 equipment       131\n 9       2 green           125\n10       2 guardian        125\n11       2 guardians       125\n12       2 sentinel        104\n13       2 environmental   100\n14       2 closure          88\n15       2 vessel           86\n16       2 horizon          85\n17       2 documentation    83\n18       2 himark           79\n19       2 paackland        77\n20       2 monitoring       73\n\n\n\n\n\n\n# A tibble: 20 × 3\n   cluster word             n\n     &lt;dbl&gt; &lt;chr&gt;        &lt;int&gt;\n 1       3 reef           128\n 2       3 nemo           120\n 3       3 money           93\n 4       3 intern          90\n 5       3 meeting         86\n 6       3 lookout         83\n 7       3 conservation    75\n 8       3 boss            61\n 9       3 tomorrow        57\n10       3 middleman       51\n11       3 vessels         44\n12       3 bring           39\n13       3 equipment       35\n14       3 birdwatching    32\n15       3 council         31\n16       3 underwater      26\n17       3 activity        25\n18       3 financial       25\n19       3 increased       25\n20       3 discuss         24\n\n\n\n\n\n\n# A tibble: 20 × 3\n   cluster word             n\n     &lt;dbl&gt; &lt;chr&gt;        &lt;int&gt;\n 1       4 birdwatching    10\n 2       4 lookout          8\n 3       4 reef             8\n 4       4 tomorrow         8\n 5       4 kelly            6\n 6       4 sam              6\n 7       4 conservation     5\n 8       4 nemo             5\n 9       4 hey              4\n10       4 perfect          4\n11       4 rare             4\n12       4 special          4\n13       4 spotted          4\n14       4 vessels          4\n15       4 bring            3\n16       4 crates           3\n17       4 equipment        3\n18       4 fragile          3\n19       4 harbor           3\n20       4 heard            3\n\n\n\n\n\n\n# A tibble: 20 × 3\n   cluster word              n\n     &lt;dbl&gt; &lt;chr&gt;         &lt;int&gt;\n 1       5 miranda          76\n 2       5 equipment        42\n 3       5 clepper          40\n 4       5 jensen           36\n 5       5 environmental    28\n 6       5 vessels          28\n 7       5 conservation     22\n 8       5 documents        20\n 9       5 rodriguez        20\n10       5 document         18\n11       5 harbor           18\n12       5 security         18\n13       5 vessel           18\n14       5 council          16\n15       5 reef             16\n16       5 nemo             14\n17       5 knowles          12\n18       5 meeting          12\n19       5 miesel           12\n20       5 officials        12\n\n\n\n\n\n# Load required libraries\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(tidytext)\nlibrary(stringr)\nlibrary(igraph)\n\n# Step 1: Extract node-cluster membership from graph\nnode_cluster &lt;- data.frame(\n  label = V(graph_comm)$name,\n  cluster = clusters$membership\n)\n\n# Step 2: Join cluster membership to sender and receiver in comm_full\ncomm_with_cluster &lt;- comm_full %&gt;%\n  left_join(node_cluster, by = c(\"sender_label\" = \"label\")) %&gt;%\n  rename(sender_cluster = cluster) %&gt;%\n  left_join(node_cluster, by = c(\"receiver_label\" = \"label\")) %&gt;%\n  rename(receiver_cluster = cluster)\n\n# Step 3: Convert to long format — one row per message-cluster pair\ncomm_long &lt;- comm_with_cluster %&gt;%\n  select(content, sender_cluster, receiver_cluster) %&gt;%\n  rename(message_content = content) %&gt;%\n  pivot_longer(cols = c(sender_cluster, receiver_cluster),\n               names_to = \"role\", values_to = \"cluster\") %&gt;%\n  filter(!is.na(cluster), !is.na(message_content))\n\n# Step 4: Tokenize text and remove stop words\ndata(\"stop_words\")  # Load tidytext stop word list\n\ntokens_by_cluster &lt;- comm_long %&gt;%\n  unnest_tokens(word, message_content) %&gt;%\n  filter(!word %in% stop_words$word, str_detect(word, \"[a-z]\")) %&gt;%\n  count(cluster, word, sort = TRUE)\n\n# Step 5: Get top 10 keywords per cluster\ntop_keywords &lt;- tokens_by_cluster %&gt;%\n  group_by(cluster) %&gt;%\n  slice_max(n, n = 20, with_ties = FALSE) %&gt;%\n  arrange(cluster, desc(n)) %&gt;%\n  ungroup()\n\n# Step 6: Split into list of data frames by cluster\nkeyword_lists &lt;- top_keywords %&gt;%\n  group_by(cluster) %&gt;%\n  group_split()\n\n# (Optional) Name each list element\nnames(keyword_lists) &lt;- paste0(\"Cluster_\", sort(unique(top_keywords$cluster)))\n\n\n\n\nThese most frequently used keywords in each cluster’s messages reveal the possible focus areas of each group:\n\nCluster 1 appears to be focused on maritime operations. Keywords like “equipment”, “harbor”, “operation(s)”, and “crew” suggest activity around marine logistics, vessel coordination, and technical operations — likely indicating a team involved in sea-based field operations or enforcement.\nCluster 2 centers around regulatory, environmental, and governance topics. Common terms such as “council”, “city”, “guardian(s)”, and “monitoring” suggest this group is tied to regulatory oversight, marine protection, and coastal coordination efforts.\nCluster 3 shows signs of being a coordinating or facilitative cluster. Top words like “meeting”, “tomorrow”, “birdwatching”, and “discuss” suggest involvement in administrative work, strategic planning, or cross-group information flow.\nCluster 4 is characterized by limited communication and does not contain any keywords of significant frequency. This lack of prominent terms makes it difficult to infer any clear thematic focus for the group.\nCluster 5 shows slightly more communication and includes certain frequently used terms. However, its complete isolation from the rest of the network limits contextual interpretation and suggests a potentially detached or non-integrated role."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-3---pseudonym-detection-and-use",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-3---pseudonym-detection-and-use",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "5.2 Question 3 - Pseudonym Detection and Use",
    "text": "5.2 Question 3 - Pseudonym Detection and Use\nTo answer Question 3, this section builds on the earlier visual analytics and introduces new visualizations to examine pseudonym usage in greater detail. A bar chart is generated to show how frequently certain terms are mentioned in communications and a heatmap is generated to show which individuals are using them. These terms include both known pseudonyms identified by Clepper (“Boss” and “The Lookout”) and additional names suspected to be aliases — such as “The Intern,” “The Middleman,” “Mrs. Money,” “The Accountant.” etc. These suspected pseudonyms do not resemble typical personal or organizational names, yet they appear frequently in message content, suggesting they may be informally used aliases.\n\n5.2.1 Visualisation\n\nAdditional VisualizationsCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Load required libraries\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# Step 1: Define list of pseudonym terms (identified + suspected)\npseudonym_terms &lt;- c(\n  \"Boss\", \"The Lookout\", \"The Intern\", \"The Middleman\", \"Mrs. Money\",\n  \"The Accountant\", \"Small Fry\", \"Neptune\", \"Knowles\",\n  \"Mako\", \"Remora\", \"Osprey\", \"Defender\", \"Serenity\", \"Seawatch\", \"Marlin\"\n)\n\n# Step 2: Extract all mentions of pseudonym terms from comm_full\npseudonym_mentions &lt;- comm_full %&gt;%\n  filter(str_detect(content, str_c(pseudonym_terms, collapse = \"|\"))) %&gt;%\n  mutate(\n    mentioned_pseudonym = str_extract_all(content, str_c(pseudonym_terms, collapse = \"|\"))\n  ) %&gt;%\n  unnest(mentioned_pseudonym)\n\n# Step 3a: Plot total mention frequency (Plot 1)\nplot_total &lt;- pseudonym_mentions %&gt;%\n  count(mentioned_pseudonym, sort = TRUE) %&gt;%\n  ggplot(aes(x = reorder(mentioned_pseudonym, n), y = n, fill = n)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(label = n), hjust = -0.2, size = 3.5) +\n  scale_fill_gradient(low = \"#cce5ff\", high = \"#003366\") +\n  coord_flip(clip = \"off\") +\n  labs(\n    title = \"Total Mentions of Identified and Suspected Pseudonyms\",\n    x = \"Pseudonym\",\n    y = \"Frequency\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    plot.margin = margin(10, 40, 10, 10)  # right padding to avoid number being clipped\n  )\n\n# Step 3b: Heatmap by sender vs pseudonym (Plot 2)\npseudonym_by_sender &lt;- pseudonym_mentions %&gt;%\n  count(sender_label, mentioned_pseudonym, sort = TRUE)\n\nplot_tile &lt;- ggplot(pseudonym_by_sender, aes(\n  x = fct_reorder(mentioned_pseudonym, desc(n)),\n  y = fct_reorder(sender_label, desc(n)),\n  fill = n)) +\n  geom_tile(color = \"white\") +\n  geom_text(aes(label = ifelse(n &gt; 0, n, \"\")), size = 3, color = \"black\") +\n  scale_fill_gradient(low = \"#f0f9e8\", high = \"#084081\") +\n  labs(\n    title = \"Pseudonym Mentions by Sender (Heatmap View)\",\n    x = \"Pseudonym\",\n    y = \"Sender\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n    axis.text.y = element_text(size = 7),\n    legend.position = \"none\"\n  )\n\n# Step 4: Display both plots\nplot_total\nplot_tile\n\n\n\n\n\n\n5.2.2 Pseudonym Users and Meaning\n• Boss is mentioned frequently by Mrs. Money, Samantha Blake, and The Middleman — suggesting operational hierarchy.\n• The Lookout is referenced both by and about Sam, The Intern, and Kelly.\n• The Intern appears across multiple conversations and is sometimes both sender and subject — possibly used by more than one person.\n• The overlap in usage patterns suggests pseudonyms may not belong to unique individuals — instead, they may represent roles or shared identities.\n• Visualization helped narrow down likely real-world entities using each alias by tracking sender-pseudonym co-occurrence.\n• This is useful for Clepper in cross-referencing roles vs names in the network — especially when aliases are used strategically to obfuscate.\n\n\n5.2.3 How Visual Aids Pseudonym Investigation\nThe visualisation of pseudonym mentions (see bar chart above) plays a crucial role in helping Clepper identify who is most likely using or referring to each alias.\n• The bar chart clearly shows which entities consistently reference “Boss,” “The Intern,” and “The Lookout.”\n• Overlapping usage — especially when the sender and the mentioned alias are the same — suggests self-reference or possible impersonation.\n• Central figures like The Intern and The Lookout frequently mention each other and themselves, raising flags about possible shared or rotating identities.\n• Without visual analytics, it would be difficult to track alias usage across hundreds of messages.\n• The visualisation:\n\nCondenses complex text patterns into actionable summaries.\nReveals core communicators behind aliases.\nHighlights potential identity obfuscation or alias sharing, which may be deliberate.\n\nUltimately, the chart equips Clepper to move beyond raw transcripts — empowering him to focus on alias resolution and influence tracing with far greater clarity and confidence."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#code",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#code",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "Code",
    "text": "Code\n\nlibrary(igraph)\nlibrary(visNetwork)\nlibrary(dplyr)\n\nedge_list &lt;- comm_full %&gt;%\n  select(sender_label, receiver_label) %&gt;%\n  filter(!is.na(sender_label) & !is.na(receiver_label)) %&gt;%\n  count(sender_label, receiver_label, name = \"weight\")\n\ngraph_comm &lt;- graph_from_data_frame(edge_list, directed = TRUE)\n\n# Step 1: Create igraph object\ngraph_comm &lt;- graph_from_data_frame(edge_list, directed = TRUE)\n\n# Step 2: Louvain Clustering\nclusters &lt;- cluster_walktrap(graph_comm)\n\n# Step 3: Define cluster labels (Cluster 1 to 5)\ncluster_map &lt;- c(\n  \"1\" = \"Cluster 1\",\n  \"2\" = \"Cluster 2\",\n  \"3\" = \"Cluster 3\",\n  \"4\" = \"Cluster 4\",\n  \"5\" = \"Cluster 5\"\n)\n\n# Step 4: Compute node-level info\ndeg_sent &lt;- degree(graph_comm, mode = \"out\")\ndeg_recv &lt;- degree(graph_comm, mode = \"in\")\n\nnodes &lt;- data.frame(\n  id = V(graph_comm)$name,\n  label = V(graph_comm)$name,\n  title = paste0(\"📤 Sent: \", deg_sent, \"&lt;br&gt;📥 Received: \", deg_recv),\n  group = cluster_map[as.character(clusters$membership)],\n  value = deg_sent + deg_recv\n)\n\n# Step 5: Factor group for legend order (Cluster 1 → Cluster 5)\nnodes$group &lt;- factor(nodes$group, levels = paste0(\"Cluster \", 1:5))\n\n# Step 6: Prepare edges\nedges &lt;- data.frame(\n  from = as_edgelist(graph_comm)[, 1],\n  to = as_edgelist(graph_comm)[, 2],\n  arrows = \"to\"\n)\n\n# Step 7: Render interactive graph\nvisNetwork(nodes, edges) %&gt;%\n  visOptions(\n    highlightNearest = TRUE,\n    nodesIdSelection = list(enabled = TRUE)\n  ) %&gt;%\n  visLegend() %&gt;%\n  visPhysics(solver = \"forceAtlas2Based\") %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-3---pseudonym-detection-and-usage",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-3---pseudonym-detection-and-usage",
    "title": "Take-home_Ex02 - VAST Challenge 2025 - Mini Challenge 3",
    "section": "5.2 Question 3 - Pseudonym Detection and Usage",
    "text": "5.2 Question 3 - Pseudonym Detection and Usage\nTo answer Question 3, this section builds on the earlier visual analytics and introduces new visualizations to examine pseudonym usage in greater detail. A bar chart is generated to show how frequently certain terms are mentioned in communications and a heatmap is generated to show which individuals are using them. These terms include both known pseudonyms identified by Clepper (“Boss” and “The Lookout”) and additional names suspected to be aliases — such as “The Intern,” “The Middleman,” “Mrs. Money,” “The Accountant.” etc. These suspected pseudonyms do not resemble typical personal or organizational names, yet they appear frequently in message content, suggesting they may be informally used aliases.\n\n5.2.1 Visualisation\n\nAdditional VisualizationsCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Load required libraries\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# Step 1: Define list of pseudonym terms (identified + suspected)\npseudonym_terms &lt;- c(\n  \"Boss\", \"The Lookout\", \"The Intern\", \"The Middleman\", \"Mrs. Money\",\n  \"The Accountant\", \"Small Fry\", \"Neptune\", \"Knowles\",\n  \"Mako\", \"Remora\", \"Osprey\", \"Defender\", \"Serenity\", \"Seawatch\", \"Marlin\"\n)\n\n# Step 2: Extract all mentions of pseudonym terms from comm_full\npseudonym_mentions &lt;- comm_full %&gt;%\n  filter(str_detect(content, str_c(pseudonym_terms, collapse = \"|\"))) %&gt;%\n  mutate(\n    mentioned_pseudonym = str_extract_all(content, str_c(pseudonym_terms, collapse = \"|\"))\n  ) %&gt;%\n  unnest(mentioned_pseudonym)\n\n# Step 3a: Plot total mention frequency (Plot 1)\nplot_total &lt;- pseudonym_mentions %&gt;%\n  count(mentioned_pseudonym, sort = TRUE) %&gt;%\n  ggplot(aes(x = reorder(mentioned_pseudonym, n), y = n, fill = n)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(label = n), hjust = -0.2, size = 3.5) +\n  scale_fill_gradient(low = \"#cce5ff\", high = \"#003366\") +\n  coord_flip(clip = \"off\") +\n  labs(\n    title = \"Total Mentions of Identified and Suspected Pseudonyms\",\n    x = \"Pseudonym\",\n    y = \"Frequency\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    plot.margin = margin(10, 40, 10, 10)  # right padding to avoid number being clipped\n  )\n\n# Step 3b: Heatmap by sender vs pseudonym (Plot 2)\npseudonym_by_sender &lt;- pseudonym_mentions %&gt;%\n  count(sender_label, mentioned_pseudonym, sort = TRUE)\n\nplot_tile &lt;- ggplot(pseudonym_by_sender, aes(\n  x = fct_reorder(mentioned_pseudonym, desc(n)),\n  y = fct_reorder(sender_label, desc(n)),\n  fill = n)) +\n  geom_tile(color = \"white\") +\n  geom_text(aes(label = ifelse(n &gt; 0, n, \"\")), size = 3, color = \"black\") +\n  scale_fill_gradient(low = \"#f0f9e8\", high = \"#084081\") +\n  labs(\n    title = \"Pseudonym Mentions by Sender (Heatmap View)\",\n    x = \"Pseudonym\",\n    y = \"Sender\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n    axis.text.y = element_text(size = 7),\n    legend.position = \"none\"\n  )\n\n# Step 4: Display both plots\nplot_total\nplot_tile\n\n\n\n\n\n\n5.2.2 Question 3a - Pseudonym Identification & Users: Who Uses What Pseudonyms?\nThe first chart displays how often each suspected pseudonym appears in the intercepted messages. Names like “Mako”, “Neptune”, and “Remora” are mentioned with unusually high frequency. Not only do they appear far more often than most other entities, but their naming style also deviates from conventional personal or organizational names — raising strong suspicions that they may be aliases. Names such as “Mrs. Money”, “The Lookout”, “Boss”, and “The Intern” appear less frequently than the top three, but still much more than the remainings. Their unusual phrasing — resembling roles or nicknames rather than real names — further supports earlier suspicions (including Clepper’s) that they may be pseudonyms used informally in communication. A few other names such as “Serenity”, “The Middleman”, “Marlin”, and “Seawatch” are mentioned less often but still draw attention due to their nonstandard naming format. Despite lower frequency, their distinctiveness suggests they could also serve as aliases.\nThe second visualisation, a heatmap, reveals who is mentioning each pseudonym:\n• “Mako” is mentioned overwhelmingly by “Seawatch”, with a smaller number of references from “The Middleman”.\n• “Neptune” is used most frequently by “The Middleman”, followed closely by “Remora”.\n• “Remora” is most often mentioned by “The Lookout”, with “The Intern” being the next most frequent user.\n• “Mrs. Money” is largely mentioned by “Mako” and “The Intern”, though overall at lower frequencies.\n• “The Lookout” is heavily referenced by both “Remora” and “The Intern”\n• “Boss” is frequently mentioned by “Mrs. Money”, “Samantha Blake”, and “The Middleman”\n• “The Intern” is used most by “The Lookout” and “Remora”\n• “Serenity” is referenced primarily by “Remora”, with some additional mentions by “Mrs. Money”.\n• “The Middleman” is mainly mentioned by “The Intern”, with a few references from “Boss” and “The Lookout”.\n• “Marlin” is mentioned most often by “Remora”, with a smaller number of mentions from “Seawatch”.\n• “Seawatch”, despite being the top user of other pseudonyms like “Mako”, is itself occasionally referenced, mainly by “Remora” and “The Middleman”.\n\n\n5.2.3 Question 3b - How Do Visualizations Aid Pseudonym Investigation?\nThe visualizations make it easier for Clepper to identify common entities by transforming raw message content into frequency-based patterns of term usage. The bar chart highlights oddly named terms that appear unusually frequently, such as “Mako”, “Mrs. Money”, “The Intern”, flagging them as potential aliases based on volume.\nThe heatmap complements this by showing which individuals mention which pseudonyms, helping Clepper see whether a term is repeatedly used by just one person or mentioned by many. This help Clepper narrow down which entities are most closely associated with each pseudonym."
  }
]